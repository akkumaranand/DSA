============================>>>>>> DP BASIC TO ADVANCED <=================================================================
=====================>>>> Q1)	0/1 Knapsack (DP - 19) <<<======================
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
// =====================>>> Memoization method <<<============
class Solution
{
public:
    int findmaxprofit(int wt[], int val[], int W, int n, vector<vector<int>> &dp) {
        if (n == 0 || W == 0) {
            return 0;
        }

        if (dp[n][W] != -1) {
            return dp[n][W];
        }

        // Choice diagram code
        if (wt[n-1] <= W) {
            dp[n][W] = max(val[n-1] + findmaxprofit(wt, val, W - wt[n-1], n - 1, dp),
                           findmaxprofit(wt, val, W, n - 1, dp));
        } else {
            dp[n][W] = findmaxprofit(wt, val, W, n - 1, dp);
        }

        return dp[n][W];
    }

    // Function to return the max value that can be put in a knapsack of capacity W
    int knapSack(int W, int wt[], int val[], int n)
    {
        vector<vector<int>> dp(n + 1, vector<int>(W + 1, -1));
        return findmaxprofit(wt, val, W, n, dp);
    }
};

// ===============================>>> Q2) Subset Sum Problem <<<===============================
#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    int issubsetsumcheck(int idx, vector<int> &arr, int sum, int value, vector<vector<int>> &dp) {
        int n = arr.size();
        
        if (value == sum) {
            return 1;
        }
        
        if (idx >= n || value > sum) {
            return 0;
        }

        if (dp[idx][value] != -1) {
            return dp[idx][value];
        }
        
        // Include the current element
        int include = issubsetsumcheck(idx + 1, arr, sum, value + arr[idx], dp);
        
        // Exclude the current element
        int exclude = issubsetsumcheck(idx + 1, arr, sum, value, dp);

        dp[idx][value] = include || exclude;

        return dp[idx][value];
    }

    bool isSubsetSum(vector<int> arr, int sum) {
        int n = arr.size();
        vector<vector<int>> dp(n + 1, vector<int>(sum + 1, -1));
        return issubsetsumcheck(0, arr, sum, 0, dp);
    }
};

// ======>>>>>  Memoization <<<=============
#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    bool issubsetsumcheck(vector<int>& arr , int sum , int n , vector<vector<int>> &dp) {
        // agar element hi nahi hai sum kuch bhi sum ka subset nahi milega
        if(n == 0 && sum != 0){
            return false;
        }
        // hamesa true hi hoga hamesa sum == 0 hamesa subset mil jayegaa 
        if(sum == 0){
            return true;
        }
        
        if(dp[n][sum] != -1){
            return dp[n][sum];
        }
        
        if(arr[n-1] <= sum ){
            dp[n][sum] = issubsetsumcheck(arr, sum - arr[n-1] , n-1 , dp) || issubsetsumcheck(arr, sum , n-1 , dp);
        }
        else if(arr[n-1]> sum){
            dp[n][sum] = issubsetsumcheck(arr, sum , n-1 , dp);
        }
        
        return dp[n][sum];
    }

    bool isSubsetSum(vector<int> arr, int sum) {
        int n = arr.size();
        vector<vector<int>> dp(n + 1, vector<int>(sum + 1, -1));
        return issubsetsumcheck(arr, sum, n ,  dp);
    }
};

// ======================>>>> TOP-DOWN Approch <<<===================
#include <iostream>
#include <vector>
using namespace std;

// =============>>> Tabulation method <<<=============
class Solution {
public:
    bool issubsetsumcheck(vector<int>& arr , int sum , int n , vector<vector<bool>> &dp) {
        
        // initialization   ===>>> base case bhi bolte hai 
          for(int i = 0 ; i <= n ; i++){
               dp[i][0] = true; 
        }
        
        for(int j = 1 ; j <= sum; j++){
                dp[0][j] = false;
            
        }
       
      
        
        // recursive part bhi bolte hai 
        // code rest of the dp matrix ke liye value store karegeee
        for(int i = 1  ; i <= n ; i++){
            for(int j = 1 ; j <= sum ; j++){
                
                if(arr[i-1] <=  j){
                    dp[i][j] = dp[i-1][j- arr[i-1]] || dp[i-1][j];
                }
                else if(arr[i-1] > j){
                      dp[i][j]  = dp[i-1][j];
                }
                
            }
        }
      return dp[n][sum];    
        
    }

    bool isSubsetSum(vector<int> arr, int sum) {
        int n = arr.size();
        vector<vector<bool>> dp(n + 1, vector<bool>(sum + 1));
        return issubsetsumcheck(arr, sum, n ,  dp);
    }
};

// ====================>>> Q3) Partition Equal Subset Sum (DP- 15) <<=====================
// contriant bahut important hai where should apply recursion or dp =====>>>> must see the contriant to know it better ............
// ==============>>> As the Question has time complexity ==>>> 2^n 
// =======>>> n is the size the of the array ===>>>> given contraint ==>> 200 ===>> 2^200 is very big so it give TLE we have to optimise this code <<<<===========
class Solution {
public:
    void issubsetpresent(int idx , vector<int>&nums , int target , int value , bool &ans){
        if(value == target){
          ans = true ;
          return ;
        }

        if(idx >= nums.size() || value > target){
            return ;
        }
        
        // pick 
        issubsetpresent(idx + 1 , nums , target , value + nums[idx] , ans);


        // dont pick
        issubsetpresent(idx + 1 , nums , target , value , ans);

    }
    bool canPartition(vector<int>& nums) {
        
        // my previous approach ===>>> Using recursion
        //=========>>>> Concept of even and odd sum ==>> if odd then it is not possible for Equall partition 
        //=========>>> if sum is even then it sum/2 subset is present then it is possiple partition Equal
        
        // sum
        int sum = 0;
        for(int i = 0 ; i < nums.size() ; i++){
              sum = sum + nums[i];
        }

        if(sum % 2  != 0){
            return false;
        }
        
        bool ans = false;
        int value = 0;
        issubsetpresent(0 , nums , sum/2 , value , ans);
        return ans;
    }
};


// ===================>>> Memoization + recursion<<===================
class Solution {
public:
    bool issubsetpresent(vector<int>& nums ,int W , int n  , vector<vector<int>> & dp ){
       // base case ===>> u can take the help form tabulation
       if(n == 0 && W != 0){
        return false;
       }
       if(W == 0){
           return true;
       }

       if(dp[n][W] != -1){
        return dp[n][W];
       }

       if(nums[n-1]<= W){
        dp[n][W] = issubsetpresent(nums , W- nums[n-1] , n-1 , dp) || issubsetpresent(nums , W , n-1 , dp);
       }
       else if(nums[n-1]> W){
        dp[n][W] = issubsetpresent(nums , W , n-1 , dp);
       }
     
      return dp[n][W];
    }
    bool canPartition(vector<int>& nums) {
       // ==================>>> USing DP << ===========
       // recursion + memoization
        // sum
        int n = nums.size();
        int sum = 0;
        for(int i = 0 ; i < nums.size() ; i++){
              sum = sum + nums[i];
        }

        if(sum % 2  != 0){
            return false;
        }
        int W = sum/2;
        vector<vector<int>>dp(n+1 , vector<int>(W+1 , -1));
        return issubsetpresent( nums , W , n , dp);
        
    }
};
// in ====>>> TOP-down only difference is funciton <<=================
class Solution {
public:
    bool issubsetsumcheck(vector<int>& arr , int sum , int n , vector<vector<bool>> &dp) {
        
        // initialization   ===>>> base case bhi bolte hai 
          for(int i = 0 ; i <= n ; i++){
               dp[i][0] = true; 
        }
        
        for(int j = 1 ; j <= sum; j++){
                dp[0][j] = false;
            
        }
       
      
        
        // recursive part bhi bolte hai 
        // code rest of the dp matrix ke liye value store karegeee
        for(int i = 1  ; i <= n ; i++){
            for(int j = 1 ; j <= sum ; j++){
                
                if(arr[i-1] <=  j){
                    dp[i][j] = dp[i-1][j- arr[i-1]] || dp[i-1][j];
                }
                else if(arr[i-1] > j){
                      dp[i][j]  = dp[i-1][j];
                }
                
            }
        }
      return dp[n][sum];    
        
    }

//================================>>>>>> Q4) Count Subsets with Sum K (DP - 17)  <<<<============================
// ==>>> brute force code <<<<============ 
....... give TLE ........
complexity :- 2^n
0 ≤ arr[i] ≤ 10^6 ===>>> N = 10^6 VERY LARGE DEFENETILY GIVE TLE ====>>> THINK OF DP
#include <vector>

class Solution {
  const int MOD = 1e9 + 7;

public:
    void countsumsubseq(int index, int arr[], int n, int sum, int value, int &count) {
        if (value == sum) {
            count = (count + 1) % MOD;
            return;
        }

        if (index >= n || value > sum) {
            return;
        }

        // Include the current element
        countsumsubseq(index + 1, arr, n, sum, value + arr[index], count);

        // Exclude the current element
        countsumsubseq(index + 1, arr, n, sum, value, count);
    }

    int perfectSum(int arr[], int n, int sum) {
        int count = 0;
        countsumsubseq(0, arr, n, sum, 0, count);
        return count;
    }
};


// ================>>>>> optimal approach <<<=========

#include <vector>
using namespace std;
#include <vector>
using namespace std;

class Solution {
public:
    const int MOD = 1e9 + 7;

    int countperfectsum(int arr[], int sum, int n, vector<vector<int>>& dp) {
      // Initialisation of the code     
        
      // making 1 row zero of dp array 
       for(int j = 0  ; j <= sum ; j++){
           dp[0][j] = 0;
       }
       
       // making 1st column to 1
       for(int i = 0 ; i <= n ; i++){
           dp[i][0] = 1;
       }
       
       // main code 
       for(int i = 1 ; i <= n  ; i ++){
           for(int j = 0  ; j <= sum ; j++){
               if(arr[i-1] <= j){
                   dp[i][j] = (dp[i-1][j-arr[i-1]] + dp[i-1][j]) % MOD;
               }
               else if(arr[i-1] > j){
                   dp[i][j] = dp[i-1][j];
               }
           }
       }
       return dp[n][sum];
       
    }

    int perfectSum(int arr[], int n, int sum) {
        // Initialize the dp table with -1
        vector<vector<int>> dp(n + 1, vector<int>(sum + 1));
        return countperfectsum(arr, sum, n, dp);
    }
};


// ===============>>>>> Q5)
