//============================================================ MOST IMPORTANT POINT IS COUNT we only run it once so that it only store first element of the level ==================================================================================
// best solution in my openion 
// ========================================================== Left view using level traversal ======================================================================================
vector<int> leftView(Node *root)
{
   // Your code here
   vector<int> ans;
  
   queue<Node * >q;
   
   if(root == NULL){
       return ans;
   }
   q.push(root);
   
   
   while(!q.empty()){
      int size = q.size();
      int count = 0;
      for(int i = 0 ; i<size ; i++){
        Node * front = q.front();
        q.pop();
        
        if(count <1){
        ans.push_back(front->data);
        count ++;
        }
      
      if(front->left){
          q.push(front->left);
      }
      if(front->right){
          q.push(front->right);
      }
      }
   }
   return ans;
}
// =============================================================Left view using recursion (easier than level traversal )==========================================================
class Solution {
public:
   void rightview(TreeNode* root , vector<int> &ans , int level ){
       if(root == NULL){
           return ;
       }

       //new level (very important haii ) 
       if(level == ans.size()){
         ans.push_back(root->val);
       }

       rightview(root->left , ans , level+1);
       rightview(root->right , ans , level+1);
       
     

   }

    vector<int> rightSideView(TreeNode* root) {
        vector<int > ans;
        rightview(root , ans , 0);
        return ans;
    }
};


// ========================================================================= RIGHT VIEW OF BINARY TREE ========================================================================================
// 1. ================= USING RECURSION ==========>>>>>>>
class Solution {
public:
   void rightview(TreeNode* root , vector<int> &ans , int level ){
       if(root == NULL){
           return ;
       }

       //new level (very important haii ) 
       if(level == ans.size()){
         ans.push_back(root->val);
       }


       rightview(root->right , ans , level+1);
       rightview(root->left , ans , level+1);
       
       
     

   }

    vector<int> rightSideView(TreeNode* root) {
        vector<int > ans;
        rightview(root , ans , 0);
        return ans;
    }
};
