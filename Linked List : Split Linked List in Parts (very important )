class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*> result;
        int count = 0;
        ListNode* start = head;

        // Count the number of nodes in the linked list
        while (start != NULL) {
            start = start->next;
            count++;
        }

        // Calculate the size of each part and the remainder
        int partSize = count / k;
        int extraNodes = count % k;

        start = head;

        // Split the linked list into parts
        for (int i = 0; i < k; i++) {
            ListNode* partHead = start;
            ListNode* current = start;

            int currentPartSize = partSize + (extraNodes-- > 0 ? 1 : 0);

            // Move to the end of the current part
            for (int j = 0; j < currentPartSize - 1 && current != NULL; j++) {
                current = current->next;
            }

            if (current != NULL) {
                // Save the next node and set the end of the current part to NULL
                ListNode* nextPart = current->next;
                current->next = NULL;

                // Update the start for the next iteration
                start = nextPart;
            }

            result.push_back(partHead);
        }

        return result;
    }
};
