//  ========================================== method 1 by changing the tree to linked list and then storing all data in the ans =====================================
class Solution{
    public:
    vector<int> preOrder(Node* root)
    {
        // Iterative approach 
        vector<int>ans;
        Node * curr = root;
        while(curr!= NULL){
            // if left part exist 
              Node * prev = NULL;
              Node * pred = NULL;
            if(curr->left){
               prev = curr->left;
               pred = curr->left;
               while(pred->right){
                  pred = pred->right ;
               }
              pred->right = curr->right;
              curr->right = prev;
              curr->left = NULL;


            }
            // if left part not exist
            
           curr = curr->right ;
        
          
       
       }  
                while(root!= NULL){
                    ans.push_back(root->data);
                     root = root->right;
               }
       
       return ans;
    }
};
/// ================================================= Morris method ==============================================================================
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        TreeNode * curr = root;
        vector<int>ans;
        // preorder root  left right 
        while(curr != NULL ){
            if(curr->left == NULL){
                ans.push_back(curr->val);
                curr = curr->right;
            }
            else{
                TreeNode * prev = curr->left;
                while(prev->right && prev->right != curr){
                    prev = prev->right;
                }
                // creation of thread 
                if(prev->right == NULL){
                    prev->right = curr;
                    ans.push_back(curr->val);
                    curr = curr->left;
                }
                // deletion of thread
                if(prev->right == curr){
                    prev->right = NULL;
                    curr = curr->right;
                }

            }
        }
        return ans;
    }
};
