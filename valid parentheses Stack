bool isValidParenthesis(string s)
{  
    stack<char> bal;

    // Write your code here.
    for(int i = 0 ; i<s.size() ; i++){
        char ch = s[i];
        if(ch == '(' || ch =='{' || ch == '['){
            bal.push(ch);
        }
        else{
            if(!bal.empty()){
               char top = bal.top();
               if(ch ==')' && top == '(' || ch == '}' && top == '{'  ||  ch== ']' && top == '['){
                   bal.pop();
               }
            
               else{
                   return false;
               }
            }

            else{
               return false;
            }
        }
       
    }

// ----------------------------------------- we can also do from switch case---------------------
bool isValidParenthesis(string s) {
    stack<char> bal;

    if (s.size() % 2 != 0) {
        return false;  // Odd length strings are not balanced
    }

    for (char ch : s) {
        switch (ch) {
            case '(':
            case '{':
            case '[':
                bal.push(ch);
                break;
            case ')':
            case '}':
            case ']':
                if (bal.empty() || ((ch == ')' && bal.top() != '(') || (ch == '}' && bal.top() != '{') || (ch == ']' && bal.top() != '['))) {
                    return false;
                }
                bal.pop();
                break;
            default:
                return false;  // Invalid characters
        }
    }

    return bal.empty();  // Stack should be empty for balanced parentheses
}
    if(bal.empty()){
        return true;
    }
    else{
        return false;
    }
}


-----------------------------------------------------------------optimisation--------------------------------------
//  If the length of the input string is odd, you can immediately return false because valid parentheses expressions must have an even number of characters.
//  You can simplify the code by reducing the number of else blocks.
bool isValidParenthesis(string s) {
    stack<char> bal;

    // If the length is odd, it's not balanced
    if (s.size() % 2 != 0) {
        return false;
    }

    for (char ch : s) {
        if (ch == '(' || ch == '{' || ch == '[') {
            bal.push(ch);
        } else if (!bal.empty() && ((ch == ')' && bal.top() == '(') || (ch == '}' && bal.top() == '{') || (ch == ']' && bal.top() == '['))) {
            bal.pop();
        } else {
            return false;
        }
    }

    return bal.empty();
}


