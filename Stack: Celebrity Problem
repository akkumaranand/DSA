// Brute bhi milega yaha  jo time complexity hai O(n^2) 



// GFG ka question hai waise codestudio me bhi hia 
// ============================================================== Optimal solution =================================================================================
class Solution 
{    
private:
    bool isknow(int a, int b, vector<vector<int> >& M) {
        return M[a][b] == 1;
    }
    
public:
    // Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        stack<int> s;
        for (int i = 0; i < n; i++) {
            s.push(i);
        }
        
        while (s.size() > 1) {
            int a = s.top();
            s.pop();
            
            int b = s.top();
            s.pop();
            
            if (isknow(a, b, M)) {
                s.push(b);
            }
            else {
                s.push(a);
            }
        }
        
        // stack me jo bachega, ek potential candidate hoga ki woh hi celebrity hai.
        // check karna hai ki nahi 
        int candidate = s.top();
        
        // row check

// digonal element ko kaise ignore kiye isse dhayan me rakhan i!= candidate ============ very important hai =======================================================
        int zerocount = 0;
        for (int i = 0; i < n; i++) {
            if (i != candidate && M[candidate][i] == 0) {
                zerocount++;
            }
        }
        if (zerocount != n - 1) {
            return -1;
        }
        
        // column check 
        int onecount = 0;
        for (int i = 0; i < n; i++) {
            if (i != candidate && M[i][candidate] == 1) {
                onecount++;
            }
        }
        if (onecount != n - 1) {
            return -1;
        }
        
        return candidate;   
    }
};

// Here time complexity is O(n)
// ==============================cCodestudio ka answer hai =======================
#include <bits/stdc++.h> 
/*
	This is signature of helper function 'knows'.
	You should not implement it, or speculate about its implementation.

	bool knows(int A, int B); 
	Function 'knows(A, B)' will returns "true" if the person having
	id 'A' know the person having id 'B' in the party, "false" otherwise.
*/

int findCelebrity(int n) {
 	// Write your code here.
    stack<int>s;
	for(int i = 0 ; i<n; i++){
		s.push(i);
	}

    
	while(s.size() >1){
	   int A = s.top();
	   s.pop();
	   int B = s.top();
	   s.pop();

	   if(knows(A,B)){
		   s.push(B);
	   }
	   else{
		   s.push(A);
	   }
	}
    // potential condidate milegaa jo ki dawa karega ki hum celebrity hai 
    // varification hoga ki kya tum sahi bol raha hai 

    int ans = s.top();
	int zerocount = 0;
	for(int i = 0 ; i<n ; i++){
		if(!knows(ans,i) && i!= ans){
           zerocount++;
		}
	}
	if(zerocount != n-1){
		return -1;
	}

	int Onecount = 0;
	for(int i = 0 ; i<n ; i++){
		if(knows(i,ans ) && i!= ans){
           Onecount++;
		}
	}
	if(Onecount != n-1){
		return -1;
	}

	return ans;
}
