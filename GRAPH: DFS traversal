// ===========>>>>   very important hai <<<<==================
using namespace std;
#include <vector>
#include<list>
void DFS(int node, unordered_map<int, list<int>> &adj, unordered_map<int, bool> &visited, vector<int> &ans)
{
    ans.push_back(node);
    visited[node] = true;

    // for (int neighbor : adj[node])
    // {
    //     if (!visited[neighbor])
    //     {
    //         DFS(neighbor, adj, visited, ans);
    //     }
    // }
    // because of map ye sab humlog direct 
    for (auto it = adj[node].begin(); it != adj[node].end(); ++it)
     {
        int neighbor = *it;
        if (!visited[neighbor])
        {
        DFS(neighbor, adj, visited, ans);
        }
    }
}


vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    unordered_map<int, list<int>> adj;
    for(int i = 0 ; i< edges.size() ; i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    unordered_map<int, bool> visited;
   
    vector<vector<int>> ans;
    for(int i = 0; i<V ; i++){
        if(!visited[i]){
            vector<int > component;
            DFS( i , adj , visited , component);
            ans.push_back(component);
        }
    }

    return ans;
}
