#include <bits/stdc++.h> 
using namespace std;

vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    // Create an adjacency list to store the graph
    unordered_map<int, list<pair<int, int>>> adjList;
    for(int i = 0; i < edges; i++){
        int u = vec[i][0];
        int v = vec[i][1];
        int w = vec[i][2];

        adjList[u].push_back(make_pair(v, w));
        adjList[v].push_back(make_pair(u, w));
    }

    // Initialize data structures
    vector<int> visited(vertices, 0);
    vector<int> dis(vertices, INT_MAX);
    set<pair<int, int>> st;

    st.insert({0, source});
    dis[source] = 0;

    while(!st.empty()){
        auto it = st.begin();
        int currVertex = it->second;
        st.erase(it);

        if (visited[currVertex]) {
            continue;
        }

        visited[currVertex] = 1;

        for(auto neighbour : adjList[currVertex]){
            int x = neighbour.first;
            int y = neighbour.second;

            if (!visited[x] && dis[x] > dis[currVertex] + y) {
                st.insert({dis[currVertex] + y, x});
                dis[x] = dis[currVertex] + y;
            }
        }
    }
    return dis;
}
