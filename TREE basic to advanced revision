===================>>>Q1) height of the tree  <<<<=========
class Solution {
public:
    int findmaxDepth(TreeNode * root ){
        if(root == NULL){
            return 0;
        }
        // if(root->left == NULL && root->right == NULL){
        //     return 1;
        // }
        int left =  findmaxDepth(root->left);
        int right = findmaxDepth(root->right);
        
        return 1 + max(left , right);
    }
    int maxDepth(TreeNode* root) {
       if(root == NULL){
        return 0;
       } 
       
       int ans = findmaxDepth(root);
       return ans;
    }
};

// ==============>>> Q2) Balanced Binary Tree <<================
// jab bhi problem ho ki bool ya inter take pair no need to worry man <<<=============
class Solution {
public:
    pair<int , bool> checkbalance(TreeNode * root ){
       if(root == NULL){
         return {0 , true};
       } 

       pair<int , bool > left = checkbalance(root->left);
       pair<int , bool> right = checkbalance(root->right);
       
       bool balance = (left.second && right.second ) && (abs(left.first - right.first)<= 1);
     
       int height = 1 + max(left.first, right.first);
     

       return {height , balance};
    }
    bool isBalanced(TreeNode* root) {
        if(root == NULL){
            return true;
        }

        int height = 1;
        pair<int, bool> ans = checkbalance(root );
        return ans.second;
    }
};

// =============>>> Q3) Diameter of the tree <<<<===================
// ===========>>> Asaan hi hai bss rivision karte rahne hai timee to time <<=====
class Solution {
public:
    pair<int, int> finddiameter(TreeNode *root) {
        if (root == nullptr) {
            return {0, 0};
        }
        
        pair<int, int> left = finddiameter(root->left);
        pair<int, int> right = finddiameter(root->right);
        
        int height = 1 + max(left.first, right.first);
        int diameter = max({left.second, right.second, left.first + right.first});
        
        return {height, diameter};
    }
    
    int diameterOfBinaryTree(TreeNode* root) {
        pair<int, int> ans = finddiameter(root);
        return ans.second;
    }
};

// ==============>>> Q4) Zig-Zag traversal <<=============
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(root == NULL){
            return ans;
        }
        queue<TreeNode*> q;
        q.push(root);
        bool traveral = true;
       while(!q.empty()){
         int n = q.size();
         // indexing jarurii hai 
         vector<int>temp(n);
         for(int i = 0 ;i< n ; i++){
            TreeNode * front = q.front();
            q.pop();
            int index = traveral ? i : n - i -1;
            temp[index] = front->val;
            if(front->left) q.push(front->left);
            if(front->right) q.push(front->right);
         }
         traveral = !traveral;
         ans.push_back(temp);
         
       }
       return ans;
    }
};

// ======================= Q5) Check the symmetry of the tree <<<==============
class Solution {
public:
    void  checkforsameornot(TreeNode * p , TreeNode * q , bool & ans){
        if(p == NULL && q == NULL){
            return ;
        }
        else if(p == NULL || q == NULL || p->val != q->val){
            ans = false;
            return ;
        }

      

        checkforsameornot(p->left , q->left , ans);
        checkforsameornot(p->right , q->right  , ans);

    }
    bool isSameTree(TreeNode* p, TreeNode* q) {
        bool ans = true ;
        if(p == NULL && q == NULL ){
            return true;
        }
        checkforsameornot(p , q , ans);

        return ans;
    }
};
//================>>>> Q6) boundary traversal <<<==================
void traversalleft( TreeNode<int> *root , vector<int> &ans){
    if((root == NULL)|| (root->left == NULL && root->right == NULL)){
        return ;
    }
    ans.push_back(root->data);
   
    if(root->left){
        traversalleft(root->left , ans);
    }
    else{
        traversalleft(root->right , ans);
    }

}

void leafNodetraversal(TreeNode<int> *root , vector<int> &ans){
    // inorder lagana hai qki humlog left to right

    if(root == NULL){
        return ;
    }

    if(root->left == NULL && root->right == NULL){
        ans.push_back(root->data);
    }
    // left first then right 
    leafNodetraversal(root->left , ans);

    leafNodetraversal(root->right , ans);

}

void traversalright(TreeNode<int> *root , vector<int> &ans){
    if((root == NULL) || (root->left == NULL && root->right == NULL) ){
        return ;
    }
    if(root->right){
       traversalright(root->right , ans);
    }
    else{
       traversalright(root->left , ans);  
    }
   
    ans.push_back(root->data);
}


vector<int> traverseBoundary(TreeNode<int> *root)
{
    vector<int> ans;
    if(root == NULL){
        return ans;
    }
    ans.push_back(root->data);
    // left part of the tree 
    traversalleft(root->left , ans);

    // to store leaf node of the tree 
    // left part leafNode 
    // leafNodetraversal(root->left , ans);
    
    // right part leafNOde
    leafNodetraversal(root , ans);

	// right part excuding leaf node 
    traversalright(root->right , ans );
    
  return ans;
}
