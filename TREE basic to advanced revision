===================>>>Q1) height of the tree  <<<<=========
class Solution {
public:
    int findmaxDepth(TreeNode * root ){
        if(root == NULL){
            return 0;
        }
        // if(root->left == NULL && root->right == NULL){
        //     return 1;
        // }
        int left =  findmaxDepth(root->left);
        int right = findmaxDepth(root->right);
        
        return 1 + max(left , right);
    }
    int maxDepth(TreeNode* root) {
       if(root == NULL){
        return 0;
       } 
       
       int ans = findmaxDepth(root);
       return ans;
    }
};

// ==============>>> Q2) Balanced Binary Tree <<================
// jab bhi problem ho ki bool ya inter take pair no need to worry man <<<=============
class Solution {
public:
    pair<int , bool> checkbalance(TreeNode * root ){
       if(root == NULL){
         return {0 , true};
       } 

       pair<int , bool > left = checkbalance(root->left);
       pair<int , bool> right = checkbalance(root->right);
       
       bool balance = (left.second && right.second ) && (abs(left.first - right.first)<= 1);
     
       int height = 1 + max(left.first, right.first);
     

       return {height , balance};
    }
    bool isBalanced(TreeNode* root) {
        if(root == NULL){
            return true;
        }

        int height = 1;
        pair<int, bool> ans = checkbalance(root );
        return ans.second;
    }
};

// =============>>> Q3) Diameter of the tree <<<<===================
// ===========>>> Asaan hi hai bss rivision karte rahne hai timee to time <<=====
class Solution {
public:
    pair<int, int> finddiameter(TreeNode *root) {
        if (root == nullptr) {
            return {0, 0};
        }
        
        pair<int, int> left = finddiameter(root->left);
        pair<int, int> right = finddiameter(root->right);
        
        int height = 1 + max(left.first, right.first);
        int diameter = max({left.second, right.second, left.first + right.first});
        
        return {height, diameter};
    }
    
    int diameterOfBinaryTree(TreeNode* root) {
        pair<int, int> ans = finddiameter(root);
        return ans.second;
    }
};
