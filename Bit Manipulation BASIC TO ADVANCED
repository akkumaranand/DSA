=============>>>>> Q1) Decimal to binary  <<<=============================
// ===>>> using recursion <<<====
void toBinary(int N)
{
    if(N==0) return;
    toBinary(N/2);
    cout<<N%2;

}

// method -> 2
void toBinary(int N)
{
     if (N == 0) {
        cout << "0" << endl;
        return;
    }
    
    string ans = "";
    while (N != 0) {
        ans += (N % 2) + '0'; // Convert integer to character
        N /= 2; // Update N by dividing by 2
    }
    
    reverse(ans.begin(), ans.end()); // Reverse the string to get the correct binary representation
    for(int i = 0 ; i < ans.size() ; i++){
        cout<<ans[i];
    }
}

=========================>>> Q2) convert biany to deciamal <<<<===============================
class Solution {
  public:
    int binary_to_decimal(string str) {
        // good question hai 
        int ans = 0 ;
        int n = str.size();
        int count = 0 ;
        for(int i = n-1; i >= 0 ; i-- ){
         int value = ((str[i]-'0') * pow(2,count));
            ans = ans + value ;
            count ++;
        }
        return ans;
        
    }
};

// ==================>>> Q3) SWAP TWO NUMBER WITHOUT THIRD VARIABLE <<===========================
#include <iostream>
using namespace std;

int main(){
    int a , b;
    cout<<"Enter tha value of a and b "<<endl;
    cin>>a>>b;
    a = a^b;
    b = a ^ b;
    a = a ^ b;
    cout<<a<<b;

return 0;
}

// ==================>>> Q4) Check if the i-th bit is set or not <<<=========================================
// brute force approach ====>>> by converting decimal to binary and then check ith index from last if 1 then set or 0 unset
// ===>>> Optimal approach <<<===
// space and time complexity == O(1)
// ====>>> left shift approach  <<<=====
class Solution
{
    public:
    // Function to check if Kth bit is set or not.
    bool checkKthBit(int n, int k)
    {   
        // bit manipulation using left shift operator 
        int temp = 1 ;
        temp = temp<<k;
        if((n & temp)  != 0){
            return true;
        }
        return false;
    }
};

// ======>>> Right shift approach <<<<========
class Solution
{
    public:
    // Function to check if Kth bit is set or not.
    bool checkKthBit(int n, int k)
    {   
       // bit manipulation by right shift approch
       n = n >> k;
       if((n & 1) != 1 ){
           return false;
       }
       return true;
    }
};

// =============================>>>>>> Q5) Bit Manipulation  <<<================
1. Get ith bit

2. Set ith bit

3. Clear ith bit

class Solution {
  public:
    void bitManipulation(int num, int i) {
    int temp = num;
    // 1) Get ith bit  ===>> right shift approach
    if(((temp >> i-1) & 1) != 0){
        cout<<1;
    }else{
        cout<<0;
    }
    temp = num;
    // set the bit with the help  of or gate
    temp =  (temp | (1<<i-1));
    cout<<" "<<temp;
    
    temp = num;
    
    // clear set bit  using And gate 
    int numm = 1;
    numm = numm<<i-1;
    numm = ~numm;
    temp = (temp & numm);
    cout<<" "<<temp;
    
    }

};

//=========================>>> Q6) Check if a number is power of 2 or not <<============
class Solution {
public:
    bool isPowerOfTwo(int n) {
     long long num = n;
      if((num & (num-1)) == 0 && num!= 0){
        return true;
      }
      return false; 
    }
};

// ======================>>>> Q7) Count the number of set bits <<<<=======================
class Solution{
    public:
    // n: input to count the number of set bits
    //Function to return sum of count of set bits in the integers from 1 to n.
    int countSetBits(int n)
    {
        int count = 0;
        for(int i = 1 ; i <= n ; i++){
            int num = i;
            while(num > 1){
                if((num&1) == 1){
                    count = count + 1;
                }
                num = num/2;
            }
            if(num == 1){
                count = count + 1;
            }
        }
        return count;
    }
};
// =============>>> other approach <<<=========
class Solution {
public:
    // Function to return the count of set bits in the integers from 1 to n.
    int countSetBits(int n) {
        int count = 0;
        for (int i = 1; i <= n; i++) {
            int num = i; 
            while (num > 1) {
                count += num & 1; 
                num >>= 1;        
            }
            if(num == 1){
                count += 1;
            }
        }
        return count;
    }
};

//=====>>>>  optimal approach <<<========== Using N & N-1
class Solution{
    public:
    // n: input to count the number of set bits
    //Function to return sum of count of set bits in the integers from 1 to n.
    int countSetBits(int n)
    {   int count = 0;
        for(int i = 1; i <= n ; i++){
            int num = i;
            while(num != 0){
                num = (num & (num -1));
                count += 1;
            }
        }
        return count;
    }
    
};
==>>>> complexity is nlogn in worst case, thats why tle is coming since nlogn can support max n as 10^6 and here 10^8 is given
===>>> setBits function runs for 32 times at max, looping from 1 to n, which is 10^8 at max,32*10^8 in the worst case scenario,which exceeds 10^9. so that is the reason i guess.

// =======>>>> optimal approach <<<=================
// ===>>>>  homework hai Due rahegaa future me karna hai simply
class Solution {
public:
    // Function to return sum of count of set bits in the integers from 1 to n.
    int countSetBits(int n) {
        if (n == 0)
            return 0;

        // Find the largest power of 2 less than or equal to n
        int x = largestPowerOf2(n);
        
        // Count bits up to 2^x - 1
        int bitsUpTo2x = x * (1 << (x - 1));
        
        // Count the bits from 2^x to n
        int msbFrom2xToN = n - (1 << x) + 1;
        
        // Count the remaining bits recursively
        int rest = n - (1 << x);
        
        return bitsUpTo2x + msbFrom2xToN + countSetBits(rest);
    }
    
private:
    int largestPowerOf2(int n) {
        int x = 0;
        while ((1 << x) <= n) {
            x++;
        }
        return x - 1;
    }
};

// ====================>>>>> Q8) Set/Unset the rightmost unset bit <<==================
class Solution {
  public:
    int toggleBits(int n , int l , int r) {
        // code here
    }
};


// =========================>>>> 9) Count number of bits to be flipped to convert A to B  <<========================================================
class Solution {
public:
    int minBitFlips(int start, int goal) {
    // if we zor start  with goal then we get no of set bit as we required bit to convert start with goal 
    long long num = start ^ goal;

    // Now find the no of set bit in the num 
    // there are two approach 
    int count = 0 ; 
    // approach 1 
    // while(num != 0){
    //     num = num & (num -1);
    //     count = count + 1;
    // }

    // approach 2 
    while(num > 0){
        if((num & 1) == 1) count = count + 1;
        num = num/2;
    }
    return count;
    }
};

// ====================>>> 10)Divide two integers without using multiplication, division and mod operator <<<=======================
