=============>>>>> Q1) Decimal to binary  <<<=============================
// ===>>> using recursion <<<====
void toBinary(int N)
{
    if(N==0) return;
    toBinary(N/2);
    cout<<N%2;

}

// method -> 2
void toBinary(int N)
{
     if (N == 0) {
        cout << "0" << endl;
        return;
    }
    
    string ans = "";
    while (N != 0) {
        ans += (N % 2) + '0'; // Convert integer to character
        N /= 2; // Update N by dividing by 2
    }
    
    reverse(ans.begin(), ans.end()); // Reverse the string to get the correct binary representation
    for(int i = 0 ; i < ans.size() ; i++){
        cout<<ans[i];
    }
}

=========================>>> Q2) convert biany to deciamal <<<<===============================
class Solution {
  public:
    int binary_to_decimal(string str) {
        // good question hai 
        int ans = 0 ;
        int n = str.size();
        int count = 0 ;
        for(int i = n-1; i >= 0 ; i-- ){
         int value = ((str[i]-'0') * pow(2,count));
            ans = ans + value ;
            count ++;
        }
        return ans;
        
    }
};

// ==================>>> Q3) SWAP TWO NUMBER WITHOUT THIRD VARIABLE <<===========================
#include <iostream>
using namespace std;

int main(){
    int a , b;
    cout<<"Enter tha value of a and b "<<endl;
    cin>>a>>b;
    a = a^b;
    b = a ^ b;
    a = a ^ b;
    cout<<a<<b;

return 0;
}

// ==================>>> Q4) Check if the i-th bit is set or not <<<=========================================
// brute force approach ====>>> by converting decimal to binary and then check ith index from last if 1 then set or 0 unset
// ===>>> Optimal approach <<<===
// space and time complexity == O(1)
// ====>>> left shift approach  <<<=====
class Solution
{
    public:
    // Function to check if Kth bit is set or not.
    bool checkKthBit(int n, int k)
    {   
        // bit manipulation using left shift operator 
        int temp = 1 ;
        temp = temp<<k;
        if((n & temp)  != 0){
            return true;
        }
        return false;
    }
};

// ======>>> Right shift approach <<<<========
class Solution
{
    public:
    // Function to check if Kth bit is set or not.
    bool checkKthBit(int n, int k)
    {   
       // bit manipulation by right shift approch
       n = n >> k;
       if((n & 1) != 1 ){
           return false;
       }
       return true;
    }
};

// =============================>>>>>> Q5) Bit Manipulation  <<<================
1. Get ith bit

2. Set ith bit

3. Clear ith bit

class Solution {
  public:
    void bitManipulation(int num, int i) {
    int temp = num;
    // 1) Get ith bit  ===>> right shift approach
    if(((temp >> i-1) & 1) != 0){
        cout<<1;
    }else{
        cout<<0;
    }
    temp = num;
    // set the bit with the help  of or gate
    temp =  (temp | (1<<i-1));
    cout<<" "<<temp;
    
    temp = num;
    
    // clear set bit  using And gate 
    int numm = 1;
    numm = numm<<i-1;
    numm = ~numm;
    temp = (temp & numm);
    cout<<" "<<temp;
    
    }

};

//=========================>>> 

