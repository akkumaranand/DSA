// ============================================ MY solution using pair<bool , int> =======================================================================================
// complexity :- space complexity O(n)
              :- time complexity O(n)

using namespace std;
pair<bool, int> checkbalance(TreeNode<int>* root){
    if(root == NULL){
        pair<bool , int > p;
        p.first = true;
        p.second = 0;
        
        return p;
    }

    pair<bool , int> left = checkbalance(root->left);
    pair<bool , int > right = checkbalance(root->right);

    int leftheight = left.second;
    int rightheight = right.second;


    bool isBalanced = abs(leftheight - rightheight) <= 1;

    int currentHeight = 1 + max(leftheight, rightheight);

    return {isBalanced && left.first && right.first, currentHeight};

  
}

bool isBalancedBT(TreeNode<int>* root){
    // Write your code here.
    // pair se banatee hai 
    bool ans = checkbalance(root).first;
    return ans;

}

// =======================================================================Love babar solution =======================================================
complexity :-
time:- O(n^2)
space:- O(n)
class Solution{
    public:
    //Function to check whether a binary tree is balanced or not.
    int heightoftree(Node * root ){
        if(root == NULL ){
            return 0;
        }
        
        int op1 = heightoftree(root->left);
        int op2 = heightoftree(root->right);
        
        int ans = max(op1 , op2)+1;
        
        return ans;
    }
    bool isBalanced(Node *root)
    {
        //  Brute code for check tree is balanced or not 
        // for that we have to check three condition  
        // 1. lefttree return true 2.right subtree return true 3. abs(height(left) - height(right)) <= 1
        
        if(root == NULL){
            return true ;
        }
        
        bool leftsubtree = isBalanced(root->left);
        bool rightsubtree = isBalanced(root->right);
        
        bool balancebyheight = abs(heightoftree(root->left) - heightoftree(root->right)) <= 1;
        
        
        if(leftsubtree && rightsubtree && balancebyheight){
            return true;
        }
        else{
            return false;
        }
    }
};
