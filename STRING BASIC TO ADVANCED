============>>>  Q1)Remove Outermost Parentheses  <<<================
brute or good approach 
Time Complexity: 
O(n)
Space Complexity:
O(n)


class Solution {
public:
    string removeOuterParentheses(string s) {
       stack<char>st;
       string ans = "";
       int count = 0;
       for(int i = 0 ; i < s.size() ; i++){
         if(st.empty()){
             if(s[i] == '('){
                st.push(s[i]);
                count ++;
             }
         }else{
             if(s[i] == '('){
                st.push(s[i]);
                ans.push_back(s[i]);
                count ++;
             }else{
                if(count > 1){
                  ans.push_back(s[i]);
                }
                st.pop();
                count --;
             }
         }
       } 
       return ans;
    }
};

// =========>>> Using stack <<<=========
class Solution {
public:
    string removeOuterParentheses(string s) {
       stack<char>st;
       string ans = "";
       for(char c : s){
         if( c == '('){
            if(!st.empty()){
                ans += c;
            }
            st.push(c);
         }else{
            st.pop();
            if(!st.empty()){
               ans += c;
            }
         }
       }
       return ans;
    }
};

=====>>>> Optimal approach <<====
class Solution {
public:
    string removeOuterParentheses(string s) {
        string ans = "";
        int depth = 0;
        for (char c : s) {
            if (c == '(') {
                if (depth > 0) ans += c;
                depth++;
            } else {
                depth--;
                if (depth > 0) ans += c;
            }
        }
        return ans;
    }
};

///  ===================== Q2)Largest Odd Number in String <<<============================
You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.

A substring is a contiguous sequence of characters within a string
// ======>>>optimal approach <<<<===
O(N) complexity both hai 
class Solution {
public:
    string largestOddNumber(string num) {
       if(num.empty()) return "";

        // we have to return largest subtring which is odd means we have to see from end of the string 
        // check if it is even piche jana hai check karna if odd break karna hai return that greatest substing 

       string largest = "";
       for(int i = num.size() - 1; i >= 0 ; i--){
        // to check we have to convert sting to integer 
        int value = num[i] - '0';
        if(num[i] % 2 == 1){
            largest = num.substr(0 , i+1);   // substirng from position to length 
            break ;   // important haii
        }
       }
       return largest;
    }
};

//  ========================>>>Q3) somorphic Strings   <<<======================
//======>>> very easy quesiton hai 
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        unordered_map<char , char> visited;
        unordered_map<char , char> visitedcon2;
        for(int i = 0 ; i < s.size() ; i++){
            // conditon 1 we are checking s to t map correct or not 
            if(!visited[s[i]]){ // only we are checking conditon 1 we have to check condition 2 also 
                visited[s[i]] = t[i];
            }else{ // agar visited hai then check wo element sahi se map hai kii nahi 
                if(visited[s[i]] != t[i]){
                    return false;
                }
               
            }

            // condtion 2 we are checking t to s map correct or not 
            if(!visitedcon2[t[i]]){ // only we are checking conditon 1 we have to check condition 2 also 
                visitedcon2[t[i]] = s[i];
            }else{ // agar visited hai then check wo element sahi se map hai kii nahi 
                if(visitedcon2[t[i]] != s[i]){
                    return false;
                }
               
            }

        }
        return true;
    }
};  
// ======================================================= Q4) Rotate String <<<=======================
// worst code =====>>>> in future we will modified it 
class Solution {
public:
    bool rotateString(string s, string goal) {
         int n = s.size();
      // finding the index of first element of goal
      if(s.size() != goal.size()) return false;
      int index = -1; 
      for(int i= 0  ;  i < s.size() ; i++){
           if(s[i] == goal[0] && s[(i+1) %n] == goal[1] && s[(i+2) %n] == goal[2] && s[(i+3)%n] == goal[3]){
             index = i;
             break ; // break is important hai 
           }
      }  
      
      if(index == -1) return false; // daale dena achaa rahta hai 

      // taking two pointer approahc 
     
      int x = index % n;
      int y = 0; 
      while(y < goal.size()){
    
        if(s[x % n ]  != goal[y]){
            return false;
        }

        x++;
        y++;
      }
      return true;
    }
};
// ================= >>> Better approach <<<<================
#include <string>
using namespace std;
Time Complexity: 
O(n2)
Space Complexity: 
O(n)

class Solution {
public:
    bool rotateString(string s, string goal) {
        if (s.size() != goal.size()) return false;

        // Concatenate the string with itself
        string temp = s + s;

        int j = 0;
        int i = 0;

        // Iterate over the concatenated string
        while (i < temp.size()) {
            if (goal[j] != temp[i]) {
                // If characters don't match, reset j and move to the next character in temp
                j = 0;
                i++;
            } else {
                // If characters match, start comparing subsequent characters
                int original_i = i;
                while (j < goal.size() && temp[i] == goal[j]) {
                    i++;
                    j++;
                }
                if (j == goal.size()) {
                    // If the entire goal is found, return true
                    return true;
                } else {
                    // Reset i to the position after the first match and reset j
                    i = original_i + 1;
                    j = 0;
                }
            }
        }
        // If the entire goal is not found, return false
        return false;
    }
};
// Better approach  ==>> USing STL
class Solution {
public:
    bool rotateString(string s, string goal) {
        // Check if both strings have the same length
        if (s.size() != goal.size()) return false;

        // Concatenate the string with itself
        string temp = s + s;

        // Check if goal is a substring of the concatenated string
        return temp.find(goal) != string::npos;
    }
};

// ==============>>>>> Q5) Check if two strings are anagram of each other   <<<<===========================
complexity :- time compleixty O(n)
              space complexity O(2n)
#include <unordered_map>
#include <string>
using namespace std;

class Solution {
public:
    bool isAnagram(string s, string t) {
        // method 1 by checking the count of each element in s and t if both are same then return true else false
        unordered_map<char, int> scnt;
        unordered_map<char, int> tcnt;
        if (s.size() != t.size()) return false;

        for (int i = 0; i < s.size(); i++) {
            scnt[s[i]]++;
            tcnt[t[i]]++;
        }

        // check count of each character is same or not   =====>>>> this part check same character count in scnt and tcnt  // ====>>> very important hai 
        for (auto & pair : scnt) {
            if (tcnt[pair.first] != pair.second) {
                return false;
            }
        }

        return true;
    }
};

// ==============>>> Better approach <<<<=================================
Time Complexity: 
O(nlogn)
Space Complexity: 
O(1)
#include <unordered_map>
#include <string>
using namespace std;

class Solution {
public:
    bool isAnagram(string s, string t) {
      // This method we should have came when we are solving this type of questions 
      if(s.size() != t.size()) return false;
      sort(s.begin() , s.end());
      sort(t.begin() , t.end());
      
      // Now we have to only check both string is same or not 
      for(int i = 0 ; i < s.size() ; i++){
          if(s[i] != t[i]){
            return false;
            break;
          } 
      }

      return true;
    }
};

// ===========>>>> best approach <<=============================
#include <unordered_map>
#include <string>
using namespace std;
time complexity :- O(n)
and space complexity :- O(1)

class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size() != t.size()) return false;
        int n = s.size();
        int frequency[5000] = {0};
        for(int i = 0 ; i < s.size() ; i++){
            frequency[s[i] - 'A']++;
        }

        for(int i = 0  ; i < t.size() ; i++){
            frequency[t[i] -'A']--;
        }

        for(int i = 0  ; i < 5000; i++){
            if(frequency[i] != 0){
                return false;
                break ;
            }
        }


        return true;
    }
}; 


// =====================>>>>> Q6)Sort Characters By Frequency <<<============================================
Time complexity :- O(nlogn)
space complexity :- O(n)
class Solution {
public:
    string frequencySort(string s) {
        // first we have to store the count of the character 
        string ans= ""; 
        unordered_map< char , int> count;
        for(auto it : s){
            count[it]++;
        }

        // use multi map to sort count of character with chatacter 
        multimap<int , char>prt;
        for(auto it : count){
            prt.insert(make_pair(it.second , it.first));
        }


        // we have to push element in the ans string 
        for(auto it = prt.rbegin(); it != prt.rend(); ++it){
            for(int i = 0 ; i < it->first ; i++){
                ans.push_back(it->second);
            }
        }

        return ans;
    }
};

// ======>>> Another method <<<<==========
 space complexity is O(n + k)    -Time complexity :_O(n + k log k),
#include <iostream>
#include <unordered_map>
#include <queue>

using namespace std;

string sortCharactersByFrequency(string s) {
    // Count the frequency of each character
    unordered_map<char, int> freq;
    for (char c : s) {
        freq[c]++;
    }

    // Create a priority queue to sort characters by frequency
    auto cmp = [](const pair<char, int>& a, const pair<char, int>& b) {
        return a.second < b.second; // We need a min heap, so we use <
    };
    priority_queue<pair<char, int>, vector<pair<char, int>>, decltype(cmp)> pq(cmp);

    // Insert characters and their frequencies into the priority queue
    for (const auto& entry : freq) {
        pq.push(entry);
    }

    // Construct the result string by repeatedly popping from the priority queue
    string result = "";
    while (!pq.empty()) {
        auto [ch, f] = pq.top();
        pq.pop();
        result.append(f, ch);
    }

    return result;
}
// ======================================== Q7) Reverse Every Word in A String <<=================================
// time complexity of the function is O(n + k * m).
// space complexity of the function is O(n + k + m).
class Solution {
public:
    string reverseWords(string s) {
        vector<string>store;
        string temp = "";
        for(int i = 0 ; i < s.size() ; i++){
            if(s[i] == ' ' && !temp.empty() ){
               store.push_back(temp);
               temp = "";
            }else{
                if(s[i] != ' '){
                   temp.push_back(s[i]);
                }
                
            }
        }

        // handle the case  of last word 
        if(!temp.empty()){
            store.push_back(temp);
        }

        string ans = "";
        // Now we have to push to string in reverse way so that return answer
        for(int i = store.size()-1 ; i >= 0 ; i--){
            ans = ans + store[i];
            if(i != 0){
               ans.push_back(' ');
            }
            
        }

        return ans;
    }
};

// ==============>>>> Better approach <<<<===============
 the time and space complexity of the reverseWords function are O(n),
class Solution {
public:
    string reverseWords(string s) {
       string ans = "";
    string temp = "";
    for (int i = 0; i < s.length(); i++)
    {
        char ch = s[i];
        if (ch == ' ') 
        {
            if (temp != "")
            {
                ans = temp + " " + ans;
            }
            temp = "";
        }
        else
        {
            temp += ch;
        }
    }
    if (temp != "")
    {
        ans = temp + " " + ans;
    }
    if (ans.length() > 0 && ans[ans.length() - 1] == ' ')
    {
        ans = ans.substr(0, ans.length() - 1);
    }
    return ans;
    }
};
// ============>>>> my optimal approach <<<====================
#include <string>

using namespace std;

string reverseOrderWords(string str) {
    // Write your code here
    string ans = "";
    string temp = "";
    for(int i = 0 ; i < str.size() ; i++) {
       if(str[i] == ' ' && !temp.empty()) {
             ans = temp + " " + ans;
             temp = "";  // Assign empty string instead of ' '
       } else {
           if(str[i] != ' ') {
                temp = temp + str[i];
           }
       }
    }
    
    // Handle the case of the last word
    if(!temp.empty()) {
        ans = temp + ' ' + ans; // Add ' ' before ans
    }
    
    return ans; 
}
// ===================================>>>> Q8 ) Sum of Beauty of all substring <<==================================================
===>>>> brute force solution  (gives tle )
=====>>> Time complexity :- O(n3);
====>>> Space complexity :- O(n2)
#include <string>
#include <unordered_map>
#include <vector>
#include <climits>

using namespace std;

class Solution {
public:
    int findmaxicount(string str) {
        unordered_map<char, int> count;
        for(int i = 0 ; i < str.size() ; i++){
            count[str[i]]++;
        }
        int maxii = 0;
        for(auto it : count){
            if(it.second > maxii){
                maxii = it.second;
            }
        }
        return maxii;
    }

    int findminicount(string str) {
        unordered_map<char, int> count;
        for(int i = 0 ; i < str.size() ; i++){
            count[str[i]]++;
        }
        int mini = INT_MAX;
        for(auto it : count){
            if(it.second < mini){
                mini = it.second;
            }
        }
        return mini;
    }

    int beautySum(string s) {
        int maxx = findmaxicount(s);
        int minni = findminicount(s);
        int ideal = maxx - minni;
        vector<string> store;

        
        for(int i = 0 ; i < s.size() ; i++){
            string temp = "";
            for(int j = i ; j < s.size() ; j++){
                temp = temp + s[j];
                store.push_back(temp);
            }
        }
        

        int cnt = 0;
        for(auto value : store){
            int temh =   findmaxicount(value);
            int teml =   findminicount(value);
            if(temh - teml > 0 ){
                cnt = cnt + temh - teml;
            }
        } 
        return cnt ;
    }  
};

// =============>>>> Better approach <<<====================
// No need to read 
time complexity :- O(n2)
space complexity :- O(n +k)
#include <string>
#include <unordered_map>
#include <vector>
#include <climits>

using namespace std;

class Solution {
public:
    int beautySum(string s) {
        int n = s.size();
        int beauty = 0;

        // Count the occurrences of each character in the string
        unordered_map<char, int> counts;
        for (char c : s) {
            counts[c]++;
        }

        // Iterate over all substrings
        for (int i = 0; i < n; i++) {
            unordered_map<char, int> substring_counts;

            // Process each substring starting at index i
            for (int j = i; j < n; j++) {
                char c = s[j];
                substring_counts[c]++;
                
                // Calculate the beauty value for the current substring
                int max_count = INT_MIN, min_count = INT_MAX;
                for (auto& it : substring_counts) {
                    max_count = max(max_count, it.second);
                    min_count = min(min_count, it.second);
                }
                beauty += (max_count - min_count);
            }
        }

        return beauty;
    }
};


//=============>>>> optimal appraoach <<<<<===================
// very important when you are dealing with question of alphabet ===>>> for count the alphabet always use array of size 26 if given lowercase and if given both then take it 52 so that one loop give the O(1) 
// time complexity very important question hai <<<<============================
// time complexity :- O(n2) 
// space complexity :- O(n)
// #include <string>
#include <unordered_map>
#include <vector>
#include <climits>

using namespace std;

class Solution {
public:
    int beautySum(string s) {
        int n = s.size();
        int ans = 0;
       
        for(int i = 0 ; i < n ; i++){
            int freq[26] = {0};
            for(int  j = i ; j < n ; j++){
             freq[s[j] - 'a']++;
             int max_value = getmax( freq);
             int min_value = getmin(freq);
             int beauty = max_value - min_value;
             ans = ans + beauty;   
             
            }
        }
        return ans;
    }

    int getmin(int  freq[]){
        int mini = INT_MAX;

        for(int i = 0 ; i < 26 ; i++){
            if(mini > freq[i] && freq[i] != 0){
                mini = freq[i];
            }
        }
        return mini;
    }

    int getmax(int  freq[]){
        int maximum = INT_MIN;
        for(int i = 0 ; i < 26 ; i++){
            if(maximum < freq[i] && freq[i] != 0){
                maximum = freq[i];
            }
        }
        return maximum;
    }
};

// ===================================>>>> Q9 ) Count number of substrings <<==================================================
Given a string of lowercase alphabets, count all possible substrings (not necessarily distinct) that have exactly k distinct characters. 
// ans for exactly k distinct == atleast k substring - atleast k+ 1 substring 
class Solution {
public:
    long long int substrCount(string s, int k) {
       long long n = s.size();
       long long ans = substringwithAtleastPDistinct(s , n , k) - substringwithAtleastPDistinct(s , n , k+1);
       return ans;
    }
    
    // count of substring with atleast k distinct character 
    long long substringwithAtleastPDistinct(string s, int n, int k) {
       int i , j ;
       int c[26];
       int f = 0;
       for(int i = 0 ; i < 26 ; i++){
           c[i] = 0;
       }
       i = 0 ; 
       j = 0 ; 
       int count = 0;
       for(int i = 0 ;  i < n ; i++){
           while(j < n && f < k){
               c[s[j] - 97]++;
               if(c[s[j] - 97] == 1){
                   f++;
               }
               j++;
           }
           // here j now one more step forward so we have to add a 1 to count 
           // count simple ==>> no of substring with k or greater than k distinct character 
           if( f >= k){
               count += n - j + 1;
           }
           
           c[s[i] - 97]--;
           if(c[s[i] - 97] == 0){
               f--;
           }
           
       }
       return count;
    }
};

