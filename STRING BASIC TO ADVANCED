============>>>  Q1)Remove Outermost Parentheses  <<<================
brute or good approach 
Time Complexity: 
O(n)
Space Complexity:
O(n)


class Solution {
public:
    string removeOuterParentheses(string s) {
       stack<char>st;
       string ans = "";
       int count = 0;
       for(int i = 0 ; i < s.size() ; i++){
         if(st.empty()){
             if(s[i] == '('){
                st.push(s[i]);
                count ++;
             }
         }else{
             if(s[i] == '('){
                st.push(s[i]);
                ans.push_back(s[i]);
                count ++;
             }else{
                if(count > 1){
                  ans.push_back(s[i]);
                }
                st.pop();
                count --;
             }
         }
       } 
       return ans;
    }
};

// =========>>> Using stack <<<=========
class Solution {
public:
    string removeOuterParentheses(string s) {
       stack<char>st;
       string ans = "";
       for(char c : s){
         if( c == '('){
            if(!st.empty()){
                ans += c;
            }
            st.push(c);
         }else{
            st.pop();
            if(!st.empty()){
               ans += c;
            }
         }
       }
       return ans;
    }
};

=====>>>> Optimal approach <<====
class Solution {
public:
    string removeOuterParentheses(string s) {
        string ans = "";
        int depth = 0;
        for (char c : s) {
            if (c == '(') {
                if (depth > 0) ans += c;
                depth++;
            } else {
                depth--;
                if (depth > 0) ans += c;
            }
        }
        return ans;
    }
};

///  ===================== Q2)Largest Odd Number in String <<<============================
You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.

A substring is a contiguous sequence of characters within a string
// ======>>>optimal approach <<<<===
O(N) complexity both hai 
class Solution {
public:
    string largestOddNumber(string num) {
       if(num.empty()) return "";

        // we have to return largest subtring which is odd means we have to see from end of the string 
        // check if it is even piche jana hai check karna if odd break karna hai return that greatest substing 

       string largest = "";
       for(int i = num.size() - 1; i >= 0 ; i--){
        // to check we have to convert sting to integer 
        int value = num[i] - '0';
        if(num[i] % 2 == 1){
            largest = num.substr(0 , i+1);   // substirng from position to length 
            break ;   // important haii
        }
       }
       return largest;
    }
};

//
