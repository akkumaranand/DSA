// =====>>>>>>>>>>>>vary important question hai <<<<<=================
// ======>> With the help of parent vector we store the path for all the node 

#include <bits/stdc++.h>

using namespace std;

void shortestBFS(int node, int initial, unordered_map<int, int> &parent, vector<int> &visited, unordered_map<int, list<int>> &adjList , int t) {
    queue<int> q;
    q.push(node);
    visited[node] = 1;
    parent[node] = initial;

    while (!q.empty()) {
        int front = q.front();
        q.pop();

        // neighbor nodes
        for (auto neighbour : adjList[front]) {
            if (!visited[neighbour]) {
                q.push(neighbour);
                visited[neighbour] = 1;
                parent[neighbour] = front;

            }
        }
    }
}

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
    unordered_map<int, list<int>> adjList;
    for (int i = 0; i < edges.size(); i++) {
        int u = edges[i].first;
        int v = edges[i].second;

        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }

    unordered_map<int, int> parent;
    vector<int> visited(n + 1, 0);

    
    for(int i = 1 ; i<= n ; i++){
        // initially hum visited[i] means 1 se kar rahe wo nahi karna tha humko start jo given hai usse dekhan that bss 
        if(!visited[s]){
            shortestBFS(s, -1, parent, visited, adjList , t);
        }
    }
   

    vector<int> ans;
    int i = t;
    ans.push_back(t);
    while (parent[i]!= -1) {
        ans.push_back(parent[i]);
        i = parent[i];
    }

    reverse(ans.begin(), ans.end());

    return ans;
}
