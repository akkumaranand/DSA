// ===============>>>>>> Q1)Find X raised to power N  <<================================
double myPow(double x, int n) {
    if(n == 0){
        return 1;
    }
    if( n > 0 ){
        return  x * myPow(x , n-1);
    }else{
        return 1/x*myPow(x , n+1);
    }
}
// ====>>> NERVER DO THIS MISTAKE  <<<=========
// class Solution {
public:
    double myPow(double x, int n) {
        bool sign = false;
        long long m = n;
        if(m < 0) sign = true;
        m = abs(n);
        double  ans = findmypow( x , m);
        if(sign == true){
            return 1/ans;
        }else{
           return ans;
        }
  
    }
     double findmypow(double x , long long n){
        if(n == 0) return 1;
         double half =  findmypow(x , n/2);
        if((n & 1) == 0){  /// must know the operator precedence very important when you write sometime   =====>>>> if(n & 1 == 0) is total wrong <<<
                                ======>>>> DO NOT DO THIS MISTAKE <<<<==========
           return  half * half;
        }
        return x *half* half;
    }
};
// comeplexity ==>> 2^n
======>>>> for same task assign value and calculate one time 
half = findmypow(x , n/2) use every wehere 
 double findmypow(double x , long long n){
        if(n == 0) return 1;
        
        if((n & 1) == 0){
           return   findmypow(x , n/2) * findmypow(x , n/2);
        }
        return x *findmypow(x , n/2)*findmypow(x , n/2);
    }

//====>>>> optimal code for leetcode <<<<===
class Solution {
public:
    double myPow(double x, int n) {
       // since mangnitude of -ve range of integer is greater than +ve so when we make it negative then it will occur TLE
       long long nn = n;
       if(nn < 0){
        nn =  -1 * nn;
       }
       double ans = 1.0;
       while(nn){
        if(nn % 2 == 1){
            ans = ans * x;
            nn = nn -1;
        }else{
            x = x * x;
            nn = nn/2;
        }
       }
       if(n < 0){
          return 1/ans;
       }
       return ans;
    }
};

// ==================>>>> Q2) Count Good Numbers <<<<============================
// =============>>> imortant question hai <<==============
class Solution {
public:
    long long findpow(long long x, long long n) {
        long long result = 1;
        while (n > 0) {
            if (n % 2 == 1) {
                result = (result * x) % 1000000007; // Modulo to avoid overflow
            }
            x = (x * x) % 1000000007; // Modulo to avoid overflow
            n /= 2;
        }
        return result;
    }
    
    int countGoodNumbers(long long n) {
        long long pp = n / 2;
        long long ep = n - pp;
        
        long long x = findpow(4, pp);
        long long y = findpow(5, ep);
        
        return (x * y) % 1000000007; // Modulo to avoid overflow
    }
};
// Note :- When question is telling you that you have to return in modulous then you should apply as much as you can so that overflow should not be there 
// ================================>>>> Q3) Reverse Stack Using Recursion <<<<==================================== 
#include<bits/stdc++.h>
using namespace std;
 
void reversta(stack<int> &stack , vector<int>& re){
  if(stack.empty()){
        return ;
    }

    int top  = stack.top();
    re.push_back(top);
    stack.pop();
   reversta(stack , re);
}
void reverseStack(stack<int> &stack) {
  vector<int>re;
   reversta(stack , re);
    for(int i = 0 ; i < re.size() ; i++){
        stack.push(re[i]);
    }
 
}
// ==============>>> Recursive approach <<<======================
void insertAtbottom(stack<int> &stack , int ans){

if(stack.empty()){
    stack.push(ans);
    return ;
}

   int top = stack.top();
   stack.pop();

   insertAtbottom(stack , ans);
   stack.push(top);
}



void reverseStack(stack<int> &stack) {
    // Write your code here

  if(stack.empty()){

     return ;
  }

  int ans = stack.top();
  stack.pop();
  
  reverseStack(stack);

  // Insert at the bottom 
  insertAtbottom(stack ,ans);

 

}

====================>>>>> Q4)  Sort Stack <<<<==============================================
#include <stack>
using namespace std;

void insertElement(stack<int> &s, int top) {
    if (s.empty() || top > s.top()) {
        s.push(top);
        return;
    }

    int temp = s.top();
    s.pop();
    insertElement(s, top);
    s.push(temp);
}

stack<int> sortStack(stack<int> &s) {
    if (s.empty()) {
        return s;
    }

    int top = s.top();
    s.pop();
    sortStack(s);
    insertElement(s, top);

    return s;
}


// ======================================== Q5) Reverse a string using recursion <<<<==============================
class Solution {
public:
    void ReversestringRecur(vector<char> & s , int start, int end){
        if(start > end){
            return ;
        }
        swap(s[start] ,s[end] );
        ReversestringRecur(s , start + 1 , end -1);
    }
    void reverseString(vector<char>& s) {
      // Using recursion 
      int start = 0 ;
      int n = s.size();
      int end = n-1;
      ReversestringRecur(s , start, end);
    }
};

// =======================================>> Q6) Print all subsequences/Power Set  <<<<==================================
// ==============>>>>>> Using method of Bit manuplation <<<==================

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        int subsets = 1 << n;  // Total number of subsets is 2^n
        vector<vector<int>> ans;
        
        for (int i = 0; i < subsets; i++) {
            vector<int> temp;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {  // Check if the j-th bit in i is set
                    temp.push_back(nums[j]);
                }
            }
            ans.push_back(temp);
        }
        
        return ans;
    }
};

// ==================>>> Method 2  ==>> Using recursion <<====================
// ===============>>>> Khud se banaya hai <<==================

100% ===>>> code khud se banay but approach to dekha hi hai 
Time Complexity:  O(2^n⋅n)
Space Complexity:  O(2^n⋅n) ===>>> since vector size 2^n subset contain that's all
class Solution {
public:
    void subsequence(vector<int>&nums , int index , int n  , vector<vector<int>> & ans ,vector<int> &temp){
        if(index >= n){
           ans.push_back(temp);
           return ;
        }
        
        temp.push_back(nums[index]);
        subsequence(nums , index + 1 , n , ans , temp);
        temp.pop_back();
        subsequence(nums , index + 1 , n , ans , temp);
       
    }
    vector<vector<int>> subsets(vector<int>& nums) {
       int start = 0;
       vector<vector<int>>ans;
       vector<int>temp;
       int  n = nums.size();
       subsequence(nums , start , n , ans , temp);
       return ans;
    }
};


// =========================>>> Q7) Count all subsequences with sum K <<===================================================
	void countsumsubseq(int index , vector<int>& temp , int arr[] , int sum , int value ,int & count , int &n){
	    if(index >= n){
	        if(value == sum){
	            count = count + 1;
	        }
	        return ;
	    }
	    
	    temp.push_back(arr[index]);
	    countsumsubseq(index + 1 , temp , arr , sum , value+ arr[index] , count , n);
	    temp.pop_back();
	    countsumsubseq(index + 1  , temp , arr , sum , value , count , n);
	}
	int perfectSum(int arr[], int n, int sum)
	{
        int count = 0;
        
        int index = 0;
        int value = 0;
        vector<int>temp;
        countsumsubseq(index , temp , arr , sum , value , count , n );
        return count;
	}

// ========>>>> here there is no need of vector<int>temp<<<==================
class Solution{

	public:
	void countsumsubseq(int index , vector<int>& temp , int arr[] , int sum , int value ,int & count , int &n){
	    if(index >= n){
	        if(value == sum){
	            count = count + 1;
	        }
	        return ;
	    }
	     // Include the current element
	    countsumsubseq(index + 1 , temp , arr , sum , value+ arr[index] , count , n);

         // Exclude the current element
	    countsumsubseq(index + 1  , temp , arr , sum , value , count , n);
	}
	int perfectSum(int arr[], int n, int sum)
	{
        int count = 0;
        
        int index = 0;
        int value = 0;
        
        countsumsubseq(index , temp , arr , sum , value , count , n );
        return count;
	}
	  
};
==============>>>>> <<<<<=================
class Solution{

	public:

void countsumsubseq(int index, int arr[], int n, int sum, int value, int &count) {
    if (index == n) {
        if (value == sum) {
            count++;
        }
        return;
    }
    
    // Include the current element
    value = value+ arr[index];
    countsumsubseq(index + 1, arr, n, sum, value, count);
     value = value- arr[index];
    // Exclude the current element
    countsumsubseq(index + 1, arr, n, sum, value, count);
}

int perfectSum(int arr[], int n, int sum) {
    int count = 0;
    countsumsubseq(0, arr, n, sum, 0, count);
    return count;
}
	  
};
///=======>>> further optimise by dp<<<==================

// ========================>> Q8)Check if there exists a subsequence with sum K <<===============================
// =====>>>>very important to revise in a good way <<==================
#include <vector>

bool issubsequence(int index, int n, int k, vector<int> &a, int value) {
    if(index <= n){
        if(value == k){
            return true;
        }
    }
    if(value >k || index == n){
        return false;
    }

   value = value + a[index];
   if(issubsequence(index + 1 , n , k , a ,value)) {
       return true;
   }
   value = value - a[index];
   if(issubsequence(index + 1 , n , k , a , value)){
       return true;
   }

   return false;
  
}

bool isSubsetPresent(int n, int k, vector<int> &a) {
    
    int value = 0;
    int index = 0;
    return issubsequence(index, n, k, a, value);
}


// ==========================>>>> Q9)Learn All Patterns of Subsequences (Theory) <<==============================================
// I have solved this question by my approach 99% test case passed only 1 % fail 
// =====================>>>> Majja agaya <<<=====================
class Solution {
     
  public:
     void countsubseq(int index  , string s , set<string> &st  , string temp){
         if(index >= s.size()){
             st.insert(temp);
             return ;
          }
          
          // add karo temp me
          temp.push_back(s[index]);
          countsubseq(index + 1 , s , st , temp );
          // remove
          temp.pop_back();
          countsubseq(index+1 , s , st , temp);
          
     }
    
    string betterString(string str1, string str2) {
       int counts1 = 0;
       int counts2 = 0;
       string temp  ;
       set<string> st1;
       set<string> st2;
       int index = 0;
       countsubseq(index , str1 , st1  , temp);
       countsubseq(index , str2 , st2  , temp);
       counts1 = st1.size();
       counts2 = st2.size();
       if(counts1 >=  counts2){
           return str1;
       }
       
       return str2;
    }
};

// =================================>>>> Q10) Combination Sum << =======================================================

class Solution {
public:
    void findcombinationsum(int idx , int target , vector<int> &temp  , vector<int> & candidates , vector<vector<int>> & ans ){
         int n = candidates.size();
         // Base case: if target is zero, add the current combination to the answer
         if(target == 0){
         ans.push_back(temp);
         return ;
         }


        // If index is out of bounds or target is negative, return
         if(idx >= n || target <0 ){
            return ;
         }
           
        
        // pick up 
        temp.push_back(candidates[idx]);
        // call jayege next me
        target = target - candidates[idx];
        findcombinationsum(idx  , target , temp , candidates , ans);   // here index is not incresed because we have to select a element more than one times so that 

        // don't pick 
        temp.pop_back();
        target = target + candidates[idx];  // jab pick wala call huwa hoga decreased ho gaayaa hoge then we have to increased
        findcombinationsum(idx + 1  , target , temp , candidates , ans);  


     ============================================================================================================
     = // Pick the current element
     =   temp.push_back(candidates[idx]);
     =  findCombinationSum(idx, target - candidates[idx], temp, candidates, ans);

     =   // Do not pick the current element
     =  temp.pop_back();
     =  findCombinationSum(idx + 1, target, temp, candidates, ans);

     ==============================================================================================================

    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        vector<int>temp;
        int index = 0;
        findcombinationsum(index , target , temp , candidates , ans );
        return ans;
    }
};


// ============================>>>> Q11)Combination Sum-II <<=========================================================
// ===============>>>> BRUTE Force appraoch <<<<<<<<<<<========================
// =========>>> Similar to previous problems <<====================
// brute force approach 
time complexity :- (2^n* k * logn)
class Solution {
public:
    void findUniqueComSum(int idx, int target, vector<int>& candidates, vector<int>& temp, set<vector<int>>& ans) {
        if (target == 0) {
            ans.insert(temp);
            return;
        }
        if (idx >= candidates.size() || target < 0) {
            return;
        }

        // Include the current element
        temp.push_back(candidates[idx]);
        findUniqueComSum(idx + 1, target - candidates[idx], candidates, temp, ans);
        
        // Backtrack and exclude the current element
        temp.pop_back();
        findUniqueComSum(idx + 1, target, candidates, temp, ans);
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int> temp;
        set<vector<int>> ans;
        sort(candidates.begin(), candidates.end());
        //  Sort to handle duplicates
        findUniqueComSum(0, target, candidates, temp, ans);
        
        // Convert set to vector   /// IMportant part must note in copy while you revising the concept 
        return vector<vector<int>>(ans.begin(), ans.end());
    }
};

// =================>>> Optimal approach <<===============================
// Dry run this code for 5 time to understand better way very very important hai question 
class Solution {
public:
    void findcombinationsum2(int idx, int &target, vector<int>& candidates, vector<int>& temp, vector<vector<int>>& ans) {
        if(target == 0){
            ans.push_back(temp);
            return ;
        }

        if(idx >= candidates.size() || target <0){
            return ;
        }

        for(int i = idx ; i < candidates.size() ; i++){
              // case - 1
            if( i > idx && candidates[i] == candidates[i-1]) continue;


            
            if(candidates[i] > target) break ;
            
            temp.push_back(candidates[i]);
            target = target - candidates[i];
            findcombinationsum2(i + 1 , target  , candidates , temp , ans);
            temp.pop_back();
            target  = target + candidates[i];
            
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
       vector<vector<int>>ans;
       vector<int>temp;
       int index = 0;
       sort(candidates.begin() , candidates.end());
       findcombinationsum2(index , target , candidates , temp , ans );
       return ans;
    }
};

// ==================================>>> Q12) Subset Sum-I <<<========================================================
// ==========>>> Easy hai <<<===========
class Solution {
  public:
    void findsumsubset(int ind , vector<int>arr , int n  , int value , vector<int> &ans){
        if(ind == n ){
            ans.push_back(value);
            return ;
        }
        
        
        findsumsubset(ind + 1 , arr, n , value + arr[ind] , ans);
        
        findsumsubset(ind+1 , arr , n , value  , ans);
        
        
    }
    vector<int> subsetSums(vector<int> arr, int n) {
        vector<int>ans;
        int index = 0;
        int value =0;
        findsumsubset(index , arr  , n  , value , ans);
        sort(ans.begin() , ans.end());
        return ans; 
        
    }
};

// ===================================>>>> Q13)Subset Sum-II  <<=============================================
// ===>> Brute force approach <<<========
class Solution {
public:
    void  findsetallnodup(int idx , vector<int> &temp , vector<int>& nums , set<vector<int>>& ans){
        if( idx ==  nums.size() ){
            ans.insert(temp);
            return ;
        }
      

         temp.push_back(nums[idx]);
         findsetallnodup(idx+1 , temp , nums , ans);
         temp.pop_back();
         findsetallnodup(idx+1 , temp , nums , ans);
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        set<vector<int>>ans;
        sort(nums.begin() , nums.end());
        vector<int>temp;
        findsetallnodup(0 , temp , nums , ans);
        return vector<vector<int>>(ans.begin() , ans.end());
    }
};

/// ==========>>>> Optimal Approach <<================
// isse  bhi dry run kar lena acchhe se bakii agge jake problem naa hooooo....
Time Complexity: 
O(n^2 *n)
Space Complexity:O(n^2 *n) 
class Solution {
public:
    void  findsetallnodup(int idx , vector<int> &temp , vector<int>& nums , vector<vector<int>>& ans){
           // add the element 
            ans.push_back(temp);
        for(int i = idx ; i < nums.size() ; i++){
            if(i > idx && nums[i] == nums[i-1]) continue;
            
            temp.push_back(nums[i]);
            findsetallnodup(i+1 , temp , nums , ans);
            temp.pop_back();
        }
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>>ans;
        sort(nums.begin() , nums.end());
        vector<int>temp;
        findsetallnodup(0 , temp , nums , ans);
        return ans;
    }
};

// ==================>>> Q14) Combination Sum - III  <<<==================================
class Solution {
public:
    void findcombinationsum3(int idx , vector<int>& temp  , vector<vector<int>>&ans , int n , int k){
          if(n == 0 && k == 0){
            ans.push_back(temp);
            return ;
          }
          
          if(idx > 9) return ;
          if(k < 0 || n < 0) return ;

          temp.push_back(idx);
          findcombinationsum3(idx + 1 , temp  , ans ,  n - idx , k -1);
          temp.pop_back();
          findcombinationsum3(idx + 1 , temp  , ans ,  n , k );

    }
    vector<vector<int>> combinationSum3(int k, int n) {
      vector<int>temp;
      vector<vector<int>>ans;  
      findcombinationsum3( 1 ,   temp , ans , n , k);
      return ans;
    }
};

// ============================ Q15) Letter Combinations of a Phone number <<============================
Dry this code atleast 5 time then you understand more better way understand <<<+==================
Time Complexity: O(k^ n)
space Complexity: O(k^ n * n)
class Solution {
public:
    void findlettercombination(int ind , string &output , string  mpp[] ,vector<string>&ans  , string &digits ){
           if(ind >= digits.size()){
            ans.push_back(output);
            return ;
            }
            
            int value = digits[ind] - '0';

            for(int i = 0 ; i < mpp[value].size() ; i++){
                output.push_back(mpp[value][i]);
                findlettercombination(ind + 1 , output , mpp , ans , digits);
                output.pop_back();

            }
        
    }
    vector<string> letterCombinations(string digits) {
        vector<string>ans;
        if (digits.empty()) return ans;  // Handle the edge case where digits is empty
        string output ;
       
        int index = 0;
        string  mpp[10]  = {" " , "" ,"abc" , "def" , "ghi" , "jkl" , "mno" , "pqrs" , "tuv" , "wxyz" };
        findlettercombination(index , output , mpp , ans , digits);
        return ans;
    }
};

//==========================>>>> Q16) Palindrome Partitioning <<<======================================
class Solution {
public:
    void findpartitionpalindrome(int index , string & s , vector<string> & path , vector<vector<string>> & ans){
        if(index >= s.size()){
            ans.push_back(path);
            return ;
        }

        for(int i = index  ; i < s.size() ; i++){
            if(ispalindrome(s , index  , i)){
               path.push_back(s.substr(index , i - index + 1));
               findpartitionpalindrome(i + 1 , s , path , ans);
               path.pop_back();
            }
        }
    }
    bool ispalindrome(string &s , int start, int end ){
        while(start < end){
            if(s[start] != s[end]){
                return false;
                break;
            }
            start = start + 1;
            end  = end -1;
        }
        return true ;

    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string>path;
        findpartitionpalindrome(0 , s , path , ans);
        return ans;
    }
};


/// ==================>>>>> Very very important question hai must revise atleast 5 time dry run to know about backtracking and recursionn <<<=============================
//========================================>>>> Q17) N Queen <<============================================================
=======>>> TO UNDERSTAND IN BETTER WAY MUST WATCH COPY SO THAT YOUR CONCEPT WILL BE CLEAR MORE <<<=====
class Solution {
public:
    bool issavetoplaced(int row , int col , vector<string>&board , int n){
        int virrow = row;
        int vircol = col;

        // check for the upper diagonal 
        while(virrow >= 0 && vircol >= 0){
            if((board[virrow][vircol]) == 'Q') return false;
            virrow--;
            vircol--;
        }

        virrow = row;
        vircol = col;
        // check for lower diagonal 
        while(vircol >= 0 && virrow < n ){
            if(board[virrow][vircol] == 'Q') return false;
            virrow ++;
            vircol --;
        }
        
        virrow = row;
        vircol = col;
        // chec for the left 
        while(vircol >= 0){
            if(board[virrow][vircol] == 'Q') return false;
            vircol--;
        }

        return true;
    }
    void findboardQueen(int col , int n , vector<string> & board , vector<vector<string>> & ans ){
        if(col == n){
            ans.push_back(board);
            return ;
        }

        for(int i = 0 ; i < n ; i++){
            if(issavetoplaced(i , col , board , n)){
                // adding queen to board
                board[i][col] = 'Q';
                // calling for next next column 
                findboardQueen(col + 1  , n , board , ans);
                // backtracking 
                board[i][col] = '.';

            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        // board hai ===>> output jo hoga no of boards hoga understand
        vector<string>board(n);
        // accorting to output [....]==>>[..Q..] aisa hai 
        string s(n , '.');
        // assining board initially to "." every row to ".";
        for(int i = 0 ; i < n ; i++){
            board[i] = s;
        }

        findboardQueen(0 , n , board , ans );
        return ans;
        
;    }
};

// ===============>>> Very very important Question asked in TCS <<<=============================
//==============================>>>> Q18) Rat in a Maze <<<=========================

#include <vector>
#include <string>
using namespace std;

class Solution {
public:
    void findpossiblepath(int row, int col, vector<vector<int>>& m, vector<vector<int>>& visited, int n, vector<string>& ans, string path) {
        if (row == n - 1 && col == n - 1) {
            ans.push_back(path);
            return;
        }
        
        // Direction vectors for Down, Left, Right, Up   ==>>> anser should be in alphabsrucal ==> so that this D L R U we have taken 
        int rowDir[] = {1, 0, 0, -1};
        int colDir[] = {0, -1, 1, 0};
        char move[] = {'D', 'L', 'R', 'U'};
        
        // Explore all four possible directions
        for (int i = 0; i < 4; i++) {
            int newRow = row + rowDir[i];
            int newCol = col + colDir[i];

            // Check if the new position is within bounds and not yet visited
            if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && visited[newRow][newCol] == -1 && m[newRow][newCol] == 1) {
                visited[newRow][newCol] = 1; // Mark as visited
                findpossiblepath(newRow, newCol, m, visited, n, ans, path + move[i]);
                visited[newRow][newCol] = -1; // Backtrack (unmark visited)
            }
        }
    }

    vector<string> findPath(vector<vector<int>>& m, int n) {
        vector<string> ans;
        string path;
        int col = 0;
        int row = 0;

        // Initialize the visited matrix to -1
        vector<vector<int>> visited(n, vector<int>(n, -1));

        // Start from the top-left corner if it is not blocked
        if (m[0][0] == 1) {
            visited[0][0] = 1;
            findpossiblepath(0, 0, m, visited, n, ans, path);
        }

        return ans;
    }
};
