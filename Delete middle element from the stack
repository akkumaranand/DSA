#include <bits/stdc++.h> 
// Recursive approach 
void solve(stack<int> &inputStack , int count , int size){

   if(count == size/2){
      inputStack.pop();
      return ;
   }

   int ans = inputStack.top();
   inputStack.pop();


   // recursive call 
   solve( inputStack , count+1 , size);


   inputStack.push(ans);
  


}



void deleteMiddle(stack<int>&inputStack, int N){
	int count = 0; 
   solve(inputStack , count  , N);
   
}


// ========================================================================================
// iterative approach 
#include <bits/stdc++.h> 

void deleteMiddle(stack<int>&inputStack, int N){
    vector<int>temp;
    int count = 0 ;
    while(count < (N/2)){
       temp.push_back(inputStack.top());
       inputStack.pop();
       count ++;
    }
 
    inputStack.pop();
   
   
    int n = temp.size();
    int j = n - 1;

    while (j >= 0) {
        inputStack.push(temp[j]);
        j--;
    }
}
// ===========================================================================================================================================================
//  we can also use tempstack 
void deleteMiddle(std::stack<int> &inputStack, int N) {
    int count = 0;

    std::stack<int> tempStack;

    // Move the first half of elements to the temporary stack
    while (count < (N / 2)) {
        tempStack.push(inputStack.top());
        inputStack.pop();
        count++;
    }

    // Remove the middle element
    inputStack.pop();

    // Move the elements back from the temporary stack to the original stack
    while (!tempStack.empty()) {
        inputStack.push(tempStack.top());
        tempStack.pop();
    }
}
