 =====================>> Q1) Maximum Points You Can Obtain from Cards <<=============================================
//=====>> pattern 1 ==>> constant window lenght 
complexity :- Time Complexity: O(k)
Space Complexity: O(1)

class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {
        int n = cardPoints.size();
        int lsum = 0;
        int rsum = 0;
        int maxsum = 0;
        int r = k-1;
        int l = 0;
        int rindex = n-1; 
        for(int i = 0 ; i < k ; i++){
            lsum = lsum + cardPoints[i];
        }
        maxsum = max(maxsum , lsum );
        while(r >= 0){
             lsum = lsum - cardPoints[r];
             r--;
             rsum = rsum + cardPoints[rindex];
             rindex--;
             int sumt = lsum + rsum;
             maxsum = max(sumt ,  maxsum);
        }
        return maxsum;
    }
};

// ===============================>>>> Q2) Longest Substring Without Repeating Characters <====================
// approach wahi hai sliding window only we have store the postion so that we can move left pointer in a good way 
// 1)move the left until the repetation character will meet store or update the size of the size of the maxlen ===>>> if it meet then move left pointer start index + 1 of that character so repetation will not occur 
// 2)another concept that is we have to only update the left pointer if the position of that character should be greater than left (old poistion of character)   
    if(l <= count[s[r]]){
                l = count[s[r]] + 1;
            }


// soluton ==>>>class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char, int> count;
        int l = 0;
        int r = 0;
        int n = s.size();
        int maxlen = 0;
        for(int i = 0 ; i < n ; i++){
            count[s[i]] = -1;
        }
        
        while (r < n) {
           // check whether repetationn or not if then we have to move l that is window
          if(count[s[r]] != -1){ // appearing 2nd time 
            if(l <= count[s[r]]){
                l = count[s[r]] + 1;
            }
          }

           count[s[r]] = r; // jo index hai wahi dal dena hai 
           maxlen = max(r-l+1 , maxlen);
           r++;
        }
        
        return maxlen;
    }
};
// further we can optimise the space complexity in every string because character is total ==>>> 256
#include <bits/stdc++.h>

using namespace std;
class Solution {
  public:
    int lengthofLongestSubstring(string s) {
      vector < int > mpp(256, -1);

      int left = 0, right = 0;
      int n = s.size();
      int len = 0;
      while (right < n) {
        if (mpp[s[right]] != -1)
          left = max(mpp[s[right]] + 1, left);

        mpp[s[right]] = right;

        len = max(len, right - left + 1);
        right++;
      }
      return len;
    }
};

// space optimisation of the code ===>>>> 
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> mpp(256 , -1);
        int left = 0 ;
        int right = 0;
        int n = s.size();
        int maxlen = 0 ;
        while(right < n){
            // check repetation 
            if(mpp[s[right]] != -1){
                left = max(mpp[s[right]] +1 , left);
            }

            // store the index 
            mpp[s[right]] =right;
            maxlen = max(right -left +1 , maxlen);
            right ++;
        }
        return maxlen;
    }
};


// =========================>>>> Q3) Max Consecutive Ones III && Find the longest consecutive subarray that contain atmost k zero  <<<=======================================
class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        // pattern to same hi type ka hai 
        int left = 0 ;
        int right = 0 ;
        int n = nums.size();
        int maxlen = 0;
        int count = 0;
        while(right < n){
            // count the zero first no need to do anything 
            if(nums[right] == 0){
                count ++;
            }
            
            // while conditon isliye hoga qki jab tak count k se kam hoga nahi to agge 
            while(count > k){
                // most important conditon hai ki zero ayega tabh hi count ko decrease karege 
                if(nums[left] == 0){
                    count --;
                }
                left++;
            }
            
            maxlen = max(right - left + 1 , maxlen);
            right ++;

        }
        return maxlen;
    }
};
Time complexity :- O(N + N) ==>> O(2N)
// ===>> optimal approach ==>>> this apply in the question where we have to find max length of the subarray 
Time complexiy :- O(N)
class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        // pattern to same hi type ka hai 
        int left = 0 ;
        int right = 0 ;
        int n = nums.size();
        int maxlen = 0;
        int count = 0;
        while(right < n){
            // count the zero first no need to do anything 
            if(nums[right] == 0){
                count ++;
            }
            
            // while conditon isliye hoga qki jab tak count k se kam hoga nahi to agge 
            if(count > k){  // Here we have fixed the size of the window because we got the size and we dont want to decrease size of that window only shif that window
                // most important conditon hai ki zero ayega tabh hi count ko decrease karege 
                if(nums[left] == 0){
                    count --;
                }
                left++;
            }
           // baat same hi hai 
           // if(count <= k){
            //   maxlen = max(right - left + 1 , maxlen);
            //}
            maxlen = max(right - left + 1 , maxlen);
            right ++;

        }
        return maxlen;
    }
};
// =====================>>>>> Q4) Fruit Into Baskets && find the maxlength of subarray with atmost two type of number <<========================================
// Most important point To note :-
                 ========>>>>> This demonstrates that the size of a std::set does not increase when attempting to insert a duplicate element.
=====>>>> brute force approach 
         time complexity :- O(N*N)  ===>>> since st max 3 element store so iteration is also ===>> O(log3) that is constant time complexity ===>> Overall complexity ==>> O(N* N)
         space complexity :- O(3)
         int findMaxFruits(vector<int> &arr, int n) {
    int maxlen = 0;

    for(int i = 0 ; i < n ; i++){
        set<int>st;
        for(int j = i ; j < n ; j++){
            st.insert(arr[j]);
            if(st.size() > 2){
                break;
            }
            int len = j -i + 1;
            maxlen = max(len , maxlen);
        }
    }
    return maxlen;
}

// ==========>>>> Better approach  <<<<===== Using double pointer and sliding window <<=====

int findMaxFruits(vector<int> &arr, int n) {
  //===>>> sliding window approach <<===
  // ======>> very easy concept hai must know revise if neccessay <<====
  int left = 0 ; 
  int right = 0 ;
  int maxlen = 0 ;
  map<int , int> mpp;
  while(right < n){
    mpp[arr[right]]++;

    while(mpp.size() > 2){
        mpp[arr[left]]--; // first notice that first you have to decrement when size is greater than 2 
                          // if uska frequency 0 ho jaye then usko remove bhi karna hai simple hai 
        if(mpp[arr[left]] == 0){
            mpp.erase(arr[left]);
        }
        left++;
    }
    
    int len = right - left + 1;
    maxlen = max(len , maxlen);
    right++;
  }
  return maxlen;
}

// =================>>>> Optimal approach <<<<=======================
int findMaxFruits(vector<int> &arr, int n) {
  //===>>> sliding window approach <<===
  // ======>> very easy concept hai must know revise if neccessay <<====
  int left = 0 ; 
  int right = 0 ;
  int maxlen = 0 ;
  map<int , int> mpp;
  while(right < n){
    mpp[arr[right]]++;

    if(mpp.size() > 2){
        mpp[arr[left]]--; // first notice that first you have to decrement when size is greater than 2 
                          // if uska frequency 0 ho jaye then usko remove bhi karna hai simple hai 
        if(mpp[arr[left]] == 0){
            mpp.erase(arr[left]);
        }
        left++;
    }
    
    int len = right - left + 1;
    maxlen = max(len , maxlen);
    right++;
  }
  return maxlen;
}

// ========================================== Q5) longest repeating character replacement  <<<=================================================
//=====>>>> brute force approach <<<<========
Time Complexity :- O(N*N)
int longestRepeatingSubstring(string &str, int k) {
    // Write your code here.
    // brute force approach 
    int maxlen = 0;
    int n = str.size();
    
    for(int i = 0 ; i < n ; i++){
        map< char , int >mpp;
        int maxfre = 0;
        for(int j = i ; j < n ; j++){
           mpp[str[j]]++;   // to store the vaue of the count ;
           maxfre = max(maxfre , mpp[str[j]]);

           // no of uppercase we can change 
           int no_change = (j - i + 1) - maxfre;

           if(no_change <=k){
               int len = j - i + 1;
               maxlen = max(len , maxlen);
           }else{
               break;
           }
        }
    }
    return maxlen;
}

===>>> Better approach <<============

int longestRepeatingSubstring(string &str, int k) {
    int maxlen = 0;
    int n = str.size();
    
    for (int i = 0; i < n; i++) {
        vector<int> count(26, 0); // Array to store the count of each character  ======>>>>> Very important hai jisse timecomplexity reduce ho jayegaa easy 
        int maxfre = 0;
        
        for (int j = i; j < n; j++) {
            count[str[j] - 'A']++; // Increment the count of the character
            maxfre = max(maxfre, count[str[j] - 'A']);

            // Number of characters to change to make the substring valid
            int no_change = (j - i + 1) - maxfre;

            if (no_change <= k) {
                int len = j - i + 1;
                maxlen = max(len, maxlen);
            } else {
                break;
            }
        }
    }
    return maxlen;
}
// =======>>>>>  very imortant point to study  <<<<<=====================
// When every question is about character then always take ===>> 256 if nothing mention to store ===>>> if mention only capital then take the size 26 

// ===================>>>> better  appraoch <<<=======================
time complexity :- O(2N)
class Solution {
public:
    int characterReplacement(string s, int k) {
        // sliding window approach 
        int left = 0;
        int right = 0;
        int maxlen = 0;
        int n = s.size();
        int maxfreq = 0;
        map<char , int > mpp;
        while(right < n){
             mpp[s[right]]++;
              maxfreq = max( maxfreq , mpp[s[right]]);
             int  no_chara = (right - left + 1) - maxfreq;
              while(no_chara > k){
                mpp[s[left]]--;
                if(mpp[s[left]] == 0){
                  mpp.erase(mpp[left]);
                }
                left ++;
                no_chara = (right - left + 1) - maxfreq;
              }

             
             if(no_chara <= k){
                int len = right - left + 1;
                maxlen = max(len , maxlen);
             }
            right ++;
        }
        return maxlen ;
    }
};

//============>>>> Optimal approach <<=================================
// jada better method hai mera nice accha se kar rahe ho mast ho raha hai majja araha hia ===>> isko complete karne ke baar bit manipulation and sliding window and 2 pointer ka ek short notes bana lena hai 
Time complexty :- O(N) 
class Solution {
public:
    int characterReplacement(string s, int k) {
        // sliding window approach 
        int left = 0;
        int right = 0;
        int maxlen = 0;
        int n = s.size();
        int maxfreq = 0;
        map<char , int > mpp;
        while(right < n){
             mpp[s[right]]++;
              maxfreq = max( maxfreq , mpp[s[right]]);
             int  no_chara = (right - left + 1) - maxfreq;
              if(no_chara > k){
                mpp[s[left]]--;
                if(mpp[s[left]] == 0){
                  mpp.erase(mpp[left]);
                }
                left ++;
                no_chara = (right - left + 1) - maxfreq;
              }

             
             if(no_chara <= k){
                int len = right - left + 1;
                maxlen = max(len , maxlen);
             }
            right ++;
        }
        return maxlen ;
    }
};

// ======================================>>>>>  Q6)Binary subarray with sum   <<<<<<==================================================================
// =======>> brute force approach <<<=====
class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
       // brute force approach 
       int n = nums.size();
       int count = 0;
       for(int i = 0 ; i < n ; i++){
            int sum = 0;
        for(int j = i ; j < n ; j++){
            sum = sum + nums[j];

            if(sum == goal){
              count ++;
            }else if(sum > goal){
               break ;
            }
         }
       }
       return count;
    }
};
======>>>> Optimal approach <<<======================
Time complexity :- O(4n)
space complexity:- O(1)
class Solution {

public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
      // sliding window method ==>> two pointer approach 
       int ans = countsubarraylessorequal(nums , goal) -  countsubarraylessorequal(nums , goal -1);
       return ans;
    }
    
    int countsubarraylessorequal(vector<int> nums , int goal){
        if(goal < 0) return 0;
        int left =0;
        int right = 0;
        int count = 0;
        int sum = 0;
        int n = nums.size();
        while(right < n){
            sum = sum + nums[right];
            while(sum > goal){
                sum = sum - nums[left];
                left++;
            }
            count = count + (right - left +1);
            right ++;
        }
        return count;
    }

};

// ==================================>>>> Q7) Count number of nice subarrays  <<====================================================
// =====>>> brute force appraoch <<<======
// Time complexity : - O(n2)
// space complexity :- O(1)
class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
     
      int countsubarray = 0;
      int n = nums.size();
      for(int i = 0 ; i < n ; i++){
         int count = 0;
        for(int  j = i ; j < n ; j++){
            if(nums[j] & 1 == 1){
                count ++;
            }

            if(count == k){
                countsubarray = countsubarray  + 1;
            }
            else if(count > k){
                break;
            }
        }
      }  
      return countsubarray;
    }
};
// =====>>> Optimal approach <<========
complexity :- time :- O(4n) ==>> O(n)
              space complexity ;- O(1)
class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
     int ans =  countsubarrysequaltok(nums , k) - countsubarrysequaltok(nums , k-1);
     return ans;       
    }

    int countsubarrysequaltok(vector<int>nums , int k){
        if(k < 0 ) return 0;
        int left = 0;
        int right = 0 ;
        int n = nums.size();
        int subarrycount  = 0;
        int count = 0;
        while(right < n){
            if(nums[right] & 1 == 1){
                count++;
            }

            while(count > k){
                if(nums[left] & 1 == 1 ){
                    count --;
                }
                left++;
            }
            int len = right - left + 1;
            subarrycount = subarrycount + len;
            right ++;
        }
       return subarrycount;
    }
};

// ======================================= Q8)Number of substring containing all three characters <<==================================================
// =====>>>  brute force approach <<===
// complexity := time ==>> O(N2)
//               space ==>> O(1)
class Solution {
public:
    int numberOfSubstrings(string s) {
       // brute force approach 
       int no_substrings = 0;
       int n = s.size();
      
       for(int i = 0 ; i < n ; i++){
           int countA = 0;
           int countB = 0;
           int countC = 0;
           for(int j = i ; j < n ; j++){
               if(s[j] == 'a') countA++;
               if(s[j] == 'b') countB++;
               if(s[j] == 'c') countC++;

               if(countA > 0 && countB > 0 && countC > 0){
                  no_substrings = no_substrings + 1 ;
               }
           }
       }
       return no_substrings;
    }
};
// slightly better approach 
class Solution {
public:
    int numberOfSubstrings(string s) {
       // brute force approach 
       int no_substring = 0;
       int n = s.size();
      
       for(int i = 0 ; i < n ; i++){
           int countA = 0;
           int countB = 0;
           int countC = 0;
           for(int j = i ; j < n ; j++){
               if(s[j] == 'a') countA++;
               if(s[j] == 'b') countB++;
               if(s[j] == 'c') countC++;

               if(countA > 0 && countB > 0 && countC > 0){
                  no_substring =  no_substring + (n-j);
                  break;
               }
           }
       }
       return no_substring;
    }

// ===============>>> Optimal Approach <<<=============
 // ye jo point hai no of substring = >>>
       // no_substring = no_substring + n - right ; // agar wo mil gala to usko chor ke jitna bhi character honge sath me to usse banege hi zero indexing hai ek kudh ka bhi add ho jaye 
       // batch gaya ki shrink kaise kare to check karo left kya uske according shrink karo and count-- karo==>>> simple hai 
// Ye sab dimag me hona hi chahiye achha question hai

// ====================>>>> Important approach hai <<<===================
class Solution {
public:
    int numberOfSubstrings(string s) {
       // Using sliding window and two pointer approach 
       int right = 0, countA = 0, countB = 0, countC = 0, left = 0, n = s.size();
       int no_substring = 0;
       while(right < n){
          if(s[right] == 'a') countA++;
          if(s[right] == 'b') countB++;
          if(s[right] == 'c') countC++;

         while(countA > 0 && countB > 0 && countC > 0){
            no_substring = no_substring + (n - right);
            if(s[left] == 'a') countA--;
            if(s[left] == 'b') countB--;
            if(s[left] == 'c') countC--;
            left++;
         }
          right++;
       }
      return no_substring;
    }
};

// ==================>>> Q9) Longest Substring with At Most K Distinct Characters <<<=======================================
// ====>>> brute force approach <<<======
// ====>>> Time complexity :- O(n*n)
     ==>>> Space complexity :- O(3)
class Solution{
  public:
    int longestKSubstr(string s, int k) {
    // your code here
    // brute force approach 
    int n = s.size();
    int maxlen = 0;
    for(int i = 0  ; i < n ; i++){
        set<char>st;
        for(int j = i ; j < n ; j++){
            st.insert(s[j]);
            
            if(st.size() == k){
                int len = j - i + 1;
                maxlen = max(len , maxlen);
            }
            if(st.size() > k){
                break;
            }
        }
    }
    if(maxlen == 0) return -1;
    return maxlen;
    }
};


//  =============>>>> Optimal approach <<<===================
// ======>>> 100 % i have made this question by first attempt . its nice question <<<===========
// ======>>> Very important Question <<<=============== ||||| Must keep in mind so that in future if this type of question ask answer it as possible as you can !!!!
// ====>>> Complexity : Time complexity :- O(N)
                        Space complexity :- O(logk) // O(k) =>>(unordered_map) check
class Solution{
  public:
    int longestKSubstr(string s, int k) {
     // here we can't use the set because when we shrink the window then there is problem of removing element from the left
     // we use map to store count and count ==>> frequency
      map<char , int > mpp; //  Here we can use unorderd_map also 
      int left = 0;
      int right = 0;
      int n= s.size();
      int maxlen = 0;
      while(right < n){
          mpp[s[right]]++;
          
          if(mpp.size() > k){
              mpp[s[left]]--;
              if(mpp[s[left]] == 0){
                  mpp.erase(s[left]);
              }
              left++;
          }
          
          if(mpp.size() == k){
              maxlen = max(maxlen , right - left + 1);
          }
          right ++;
      }
      if(maxlen == 0) return -1;
      return maxlen;
    }
    
    
};

// ===============>>>> MOST OPTIMAL APPROACH <<<=================

// ============>>> space optimisation can further done <<===========
// ======>>>  For the interview purpose to explain <<<=======
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

class Solution {
public:
    int longestKSubstr(string s, int k) {
        vector<int> charCount(26, 0);  // Use a vector of size 26 for character frequencies ==>> for small character
        int left = 0, right = 0;
        int n = s.size();
        int uniqueCount = 0;  // Track the number of unique characters
        int maxlen = -1;  // Initialize maxlen to -1

        while (right < n) {
            if (charCount[s[right] - 'a'] == 0) {
                uniqueCount++;  // Increment unique count if this character is new to the window
            }
            charCount[s[right] - 'a']++;  // Increment the count of the current character

            // Check if we have more than k unique characters
            while (uniqueCount > k) {
                charCount[s[left] - 'a']--;  // Decrement the count of the character at the left
                if (charCount[s[left] - 'a'] == 0) {
                    uniqueCount--;  // Decrement unique count if this character is removed from the window
                }
                left++;  // Shrink the window from the left
            }

            // If the number of unique characters is exactly k, update maxlen
            if (uniqueCount == k) {
                maxlen = max(maxlen, right - left + 1);
            }
            
            right++;  // Expand the window by moving the right pointer
        }

        return maxlen;
    }
};


// ==============================>>> Q10) Subarray with k different integers <<<=========================================
// =====>>> brute force approach <<=====
//  Time Complexity: O(n^2 \log n)
// Space Complexity: O(k)
class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        int n = nums.size();
        int count = 0;
          // to store different character 
        for(int i = 0 ; i < n ; i++){
            set<int> st; 
            for(int j = i ; j < n ; j++){
                st.insert(nums[j]);

                if(st.size() == k){
                   count = count+1;
                }
                if(st.size() > k){
                    break;
                }
            }
        }
        return count;
    }
};






// ======>>> approach bilkul sahi tha  excute bhi sahi kiya finally bss kuch code minor mistake but maine khud se banaya hai welll done anand <<<==================
...HARD QUESTION ......
=====>>>>Optimal approach <<<<======
class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
      if (nums.empty() || k <= 0) return 0;
        // count hi return karna hai 
        // countofsubarry hi bhi hai to shortmethod hai (count<= k) and (count<=k-1) return kar do answer
        int ans = subarraywithlessofequal(nums , k) - subarraywithlessofequal(nums , k-1);
        return ans;
    }
    int  subarraywithlessofequal(vector<int> &nums , int k){
        if(k <= 0 ) return 0; // must add this point in every quetions like this
        int left = 0; 
        int right = 0;
        int n = nums.size();
        int no_count = 0;
        unordered_map< int , int> mpp;
        while(right < n){
            mpp[nums[right]]++;

            while(mpp.size() > k){
              mpp[nums[left]]--;
              if(mpp[nums[left]] == 0){
                mpp.erase(nums[left]);
              }
              left++;
            }
            
            no_count = no_count + (right - left + 1);

            right ++;
        }
       return no_count; 
    }
};
// ==============================>>>> Q11) Minimum Window Substring <<=============================================
//=====>>>  Brute force approach <<=====
class Solution {
public:
    string minWindow(string s, string t) {
        int minlen = INT_MAX;
        int sindex = -1;
        int m = t.size();
        int n = s.size();
        
        for(int i = 0 ; i < n ; i++ ){
            int mpp[256] = {0}; // Using array for character count
            int cnt = 0;
            
            // Counting characters in string t
            for(int k = 0 ; k < m ; k++ ) {
                mpp[t[k]]++;
            }
            
            for(int j = i ; j < n  ; j++) {
                if(mpp[s[j]] > 0) {
                    cnt++;
                    mpp[s[j]]--;
                } 
                
                // If all characters of t are found
                if(cnt == m) {
                    if(j - i + 1 < minlen) {
                        minlen = j - i + 1;
                        sindex = i;
                        break; // Found the minimum window, break inner loop
                    }
                }
            }
        }
        
        // Return empty string if no valid window found
        if(sindex == -1) {
            return "";
        }
        
        // Return the substring from s with minimum window
        return s.substr(sindex, minlen);
    }
};
time complexity :- O(n*n)
space complexity :- O(256)

// ========>>> Optimal approach <<<=================
