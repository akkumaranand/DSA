// ========================================================== VERY IMPORTANT QUESTION OF TREE ===================================================================
// Very important question hai must revise atleast 3 times 
class Solution {
public:
    void createmapping(Node * root, map<Node * , Node * > &NodeToparent) {
        if (root == nullptr) {
            return;
        }

        queue<Node *> q;
        q.push(root);

        while (!q.empty()) {
            Node * temp = q.front();
            q.pop();

            if (temp->left) {
                q.push(temp->left);
                NodeToparent[temp->left] = temp;
            }
            if (temp->right) {
                q.push(temp->right);
                NodeToparent[temp->right] = temp;
            }
        }
    }

    void TargetNode(Node * root, int targetValue, Node * &targetNode) {
        if (root == nullptr) {
            return;
        }

        if (root->data == targetValue) {
            targetNode = root;
        }
        TargetNode(root->left, targetValue, targetNode);
        TargetNode(root->right, targetValue, targetNode);
    }

    void minTimeToburn(map<Node * , bool> &checkvisited, map<Node * , Node * > &NodeToparent, Node * targetNode, int &time) {
        queue<Node *> q;
        q.push(targetNode);
        checkvisited[targetNode] = true;

        while (!q.empty()) {
            int size = q.size();

            for (int i = 0; i < size; i++) {
                Node * current = q.front();
                q.pop();

                // Enqueue unvisited neighbors
                if (current->left && !checkvisited[current->left]) {
                    q.push(current->left);
                    checkvisited[current->left] = true;
                }

                if (current->right && !checkvisited[current->right]) {
                    q.push(current->right);
                    checkvisited[current->right] = true;
                }

                // Enqueue the parent node if not visited
                if (NodeToparent.find(current) != NodeToparent.end() && !checkvisited[NodeToparent[current]]) {
                    q.push(NodeToparent[current]);
                    checkvisited[NodeToparent[current]] = true;
                }
            }

            // Increment time after processing each level
            time++;
        }
    }

    int minTime(Node* root, int target) {
        map<Node * , Node * > NodeToparent;
        map<Node * , bool> checkvisited;

        createmapping(root, NodeToparent);

        Node * targetNode = nullptr;
        TargetNode(root, target, targetNode);

        int time = 0;
        minTimeToburn(checkvisited, NodeToparent, targetNode, time);
        return time - 1;  // Subtract 1 to get the time it takes to reach the target node itself
    }
};
