// =============== Using recursion ===========================
class Solution {
public:
    void checkpalindrome(ListNode* &start, ListNode* end, bool &ans, int count) {
        if (end == NULL) {
            return;
        }

        checkpalindrome(start, end->next, ans, count);

        if (start->val != end->val && count > 0) {
            ans = false;
            if (count == 1) {
                return;
            }
        }
        count = count - 1;
        start = start->next;
        // here we have to take start by call by referece because in function back start is remain start not updating 
        // in every call start is remain start so we have to take start by call by refernce 
    }

    bool isPalindrome(ListNode* head) {
        ListNode* start = head;
        ListNode* end = head;
        int count = 0;
        bool ans = true;
        while (head != NULL) {
            count++;
            head = head->next;
        }

        count = count / 2;

        checkpalindrome(start, end, ans, count);
        return ans;
    }
};
//===========================>>>>> approach 2 by storing the element of linked list in the vector <<<=================================




// ==================================>>>>> time complexity O(n) and space complexity :-  O(1) <<<<===============================

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (!head || !head->next) {
            // An empty list or a list with one node is considered a palindrome.
            return true;
        }

        ListNode* slow = head;
        ListNode* fast = head;

        // Use a fast and slow pointer to find the middle of the linked list.
        while (fast->next != NULL && fast->next->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Reverse the second half of the linked list.
        ListNode* secondHalf = reverseList(slow->next);

        // Compare the first and second halves of the linked list.
        while (secondHalf != NULL) {
            if (head->val != secondHalf->val) {
                // Values don't match, not a palindrome.
                return false;
            }
            head = head->next;
            secondHalf = secondHalf->next;
        }

        // All values matched, it's a palindrome.
        return true;
    }

private:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = NULL;
        
        while (head != NULL) {
            ListNode* nextNode = head->next;
            head->next = prev;
            prev = head;
            head = nextNode;
           

           
            cout<<endl;
        }
        

        return prev;
    }
};
