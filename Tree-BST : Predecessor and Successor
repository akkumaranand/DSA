class Solution {
public:
    void findpre(Node *root, Node *&pre, Node *&suc, int key) {
        if (root == NULL) {
            return;
        }
        if (root->key > key) {
            suc = root; // important hai 
            findpre(root->left, pre, suc, key);
        }
        else if (root->key < key) {
            pre = root; // important hai 
            findpre(root->right, pre, suc, key);
        }
        
      else {
            // Key found, find the maximum node in the left subtree for predecessor
            if (root->left) {
                pre = root->left;
                while (pre->right) {
                    pre = pre->right;
                }
            }
            // Key found, find the minimum node in the right subtree for successor
            if (root->right) {
                suc = root->right;
                while (suc->left) {
                    suc = suc->left;
                }
            }
        }
    }

    void findPreSuc(Node *root, Node *&pre, Node *&suc, int key) {
      
        findpre(root, pre, suc, key);
    }
};
// ==========================================================================================================
void findpreandsuc(TreeNode * & root , TreeNode * &pre , TreeNode * &suc , int key){
   if(root == NULL ){ return ;}
   
   if(root->data == key){
      // predecessor
      // AGar left exist nahi karta ho to wo check karna hoga na 
      if(root->left != NULL){
          pre = root->left;
          while(pre->right != NULL){
              pre = pre->right ;
          }
      }
      
      // Successor 
      if(root->right != NULL){
          suc = root->right;
          while(suc->left != NULL){
              suc = suc->left;
          }
      }

     // root->left == NULL hoga to return hoga hi matlab pre = NULL hoga initialise kar chuke hai already 
   
   }

   else if(root->data > key){
     suc = root;
     findpreandsuc(root->left , pre , suc , key);
   }
   else{
        pre = root;
       findpreandsuc(root->right , pre , suc , key );
   }

}

pair<int, int> predecessorSuccessor(TreeNode *root, int key)
{    
    TreeNode * pre = NULL;
    TreeNode * suc = NULL;

    findpreandsuc(root , pre , suc , key);
   
    int a = (pre != NULL) ? pre->data : -1;
    int b = (suc != NULL) ? suc->data : -1;
  
    return {a , b};
   

   
}
