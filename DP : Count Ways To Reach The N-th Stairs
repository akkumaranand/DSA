// ========================>>>>>>>>>>>> Run time error complexity O(n^2)  <<<===============================================
#include <bits/stdc++.h> 
int solve(int n){
    if(n == 1 || n== 2){
        return n;
    }

    return (solve(n-1) + solve(n-2));
}

int countDistinctWays(int nStairs) {
    //  Write your code here.
    int ans = solve(nStairs);
    return ans;

}

// ================>> Applying DP int this code <<<<<==================================
1.Approach 1 :- Recursion + Memoiazation 
#include <iostream>
#include <vector>
#define mod 1000000007  // output return kaise kartee hai thoda dekhnaaa hai 
using namespace std;

// Recursive function to calculate distinct ways to climb stairs
int solve(int n, vector<int> &dp) {
    if (n == 0) return 1;
    if (n == 1 || n == 2) return n;

    if (dp[n] != -1) {
        return dp[n];
    }

    dp[n] = (solve(n - 1, dp) + solve(n - 2, dp)) % mod ;
    return dp[n];
}

// Wrapper function for counting distinct ways
int countDistinctWays(int nStairs) {
    vector<int> dp(nStairs + 1, -1);
    return solve(nStairs, dp);
}

// ========>>>> Space optimisation <<<=====================
#include <iostream>
#include <vector>
#define mod 1000000007
using namespace std;

int countDistinctWays(int nStairs) {
    // tabulation method 
    if(nStairs == 0) return 1;
    if(nStairs == 1) return 1;

    int prev1 = 1;
    int prev2 = 2;

    for(int i = 3; i <= nStairs; i++) {
        int curr = (prev1 + prev2) % mod;
        prev1 = prev2;
        prev2 = curr;
    }

    return prev2;   
}


// ================= >>>  Minimum cost of climbing stairs <<<< ========================

// ====>>> Approach 1 :-  Recursion and memoiazation 
class Solution {
public:
    int solve(vector<int>& cost, int n, vector<int>& dp) {
        if (n == 0) {
            return cost[0];
        }
        if (n == 1) {
            return cost[1];
        }

        if (dp[n] != -1) {
            return dp[n];
        }

        dp[n] = cost[n] + min(solve(cost, n - 1, dp), solve(cost, n - 2, dp));
        return dp[n];
    }

    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int> dp(n + 1, -1);
        int ans = min(solve(cost, n - 1, dp), solve(cost, n - 2, dp));
        return ans;
    }
};


//=====>>> Approach 2 :- Tabulation method :--
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int> dp(n + 1, 0);  // Initialize all elements to 0 
        dp[0] = cost[0];
        dp[1] = cost[1];

        for(int i = 2 ; i< n ; i++){
            dp[i] = min(dp[i-1] ,  dp[i-2] )+ cost[i];

        }

        int ans = min(dp[n-1] , dp[n-2]);
        return ans;
    }
};

// ===== >> Space optimisation <<<====
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        
        int prev1 = cost[0];
        int  prev2 = cost[1];

        for(int i = 2 ; i< n ; i++){
            int curr  = min(prev1 ,  prev2)+ cost[i];
            prev1 = prev2;
            prev2 = curr;
        }

        int ans = min(prev1 , prev2);
        return ans;
    }
};

