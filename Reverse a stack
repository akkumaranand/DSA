// --------------------------------------------------------------- Using Recursion ----------------------------------------------------------------------------------------

void insertAtbottom(stack<int> &stack , int ans){

if(stack.empty()){
    stack.push(ans);
    return ;
}

   int top = stack.top();
   stack.pop();

   insertAtbottom(stack , ans);
   stack.push(top);
}



void reverseStack(stack<int> &stack) {
    // Write your code here

  if(stack.empty()){

     return ;
  }

  int ans = stack.top();
  stack.pop();
  
  reverseStack(stack);

  // Insert at the bottom 
  insertAtbottom(stack ,ans);
}
// complexity 1.Time :- O(n^2)
//            2.space : O(n)
//------------------------------------------------------------------------------Using Iterative approach --------------------------------------------------------------------------------------------------
// so iterative approach is better than recursive approach 
#include<bits/stdc++.h>
void reverseStack(stack<int> &stack) {
   vector<int> s;
   while(!stack.empty()){
       s.push_back(stack.top());
       stack.pop();
   }
   
   for(int i = 0 ; i< s.size() ; i++){
       stack.push(s[i]);
   }

    
}
// complexity 1.Time :- O(n)
//            2.space : O(n)
