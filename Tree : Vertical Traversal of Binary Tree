Vertical Traversal of Binary Tree
// very important concept hai ........
// deep analysis hai ... 

class Solution
{
    public:
    //Function to find the vertical order traversal of Binary Tree.
    vector<int> verticalOrder(Node *root)
    {
        //Your code here
        map<int , map<int , vector<int>>> nodes;
        // para-1 -> horizontal distance ,para-2-1 :- level  , para-2-2 : List of nodes ;
        queue<pair<Node * , pair< int , int >>> q;
        // para -1 :- node ka pointer ,  para-2-1:- horizontal distance , para-2-2 :- level
        
        vector<int> ans;
        // what we need node->data bss wo mapping se milegaa
        if(root == NULL){
            return ans;
        }
        
        q.push(make_pair(root , make_pair(0, 0)));
        
        while(!q.empty()){
            pair<Node * , pair< int , int >> temp = q.front();
            q.pop();
            int hd = temp.second.first;
            int level = temp.second.second;
            Node * frontnode = temp.first;
            
           // important hai how we are writing 
           // nodes[hd][level] --> representing vector inside map ==> for inserting element element m[0] = 1 matlab hot hai li o index me 1 daal diye map or array me same 
           
            nodes[hd][level].push_back(frontnode->data); // data store ho raha hai map ke vector wala argument me 
            
            
            
            // how we insert add element in the queue with updataing level and horitzontal distance 
            if(frontnode -> left){
                q.push(make_pair(frontnode->left ,make_pair(hd-1 , level+1 )));
            }
            if(frontnode -> right){
                 q.push(make_pair(frontnode->right , make_pair(hd+1 , level+1 )));
            }
        }
        
        // we have push element from map -> vector -> to answer vector 
        for(auto i : nodes){
            for(auto j :i.second){
                for(auto k : j.second){
                    ans.push_back(k);
                }
            }
        }
        
        return ans;
    }
};

